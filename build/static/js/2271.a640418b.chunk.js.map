{"version":3,"file":"static/js/2271.a640418b.chunk.js","mappings":"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","sources":["../node_modules/lodash/now.js","services/SuperAdmin/Stock/StockService.js","../node_modules/lodash/_trimmedEndIndex.js","view/SuperAdmin/stock/store/dataSlice.js","view/SuperAdmin/stock/store/stateSlice.js","view/SuperAdmin/stock/components/StockForm.js","view/SuperAdmin/stock/components/StockTable.js","view/SuperAdmin/stock/components/StockTableSearch.js","view/SuperAdmin/stock/components/StockTableFilter.js","view/SuperAdmin/stock/components/StockTableTools.js","view/SuperAdmin/stock/store/index.js","view/SuperAdmin/stock/index.js","../node_modules/lodash/toNumber.js","../node_modules/lodash/_baseTrim.js","components/shared/loaders/TableRowSkeleton.js","components/shared/DataTable.js","../node_modules/lodash/debounce.js"],"sourcesContent":["var root = require('./_root');\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n","import ApiService from \"../../ApiService\";\n\nexport async function apiGetAllProductCodeOption() {\n  return ApiService.fetchData({\n    url: \"v1/web/company/product/codes\",\n    method: \"get\",\n  });\n}\n\nexport async function apiGetAllStockData(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/po-list/customer/id\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiGetAllStock(params) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/stock\",\n    method: \"get\",\n    params,\n  });\n}\n\nexport async function apiDeleteStock(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/stock/delete/id\",\n    method: \"delete\",\n    data,\n  });\n}\n\nexport async function apiPutStock(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/stock/update/id\",\n    method: \"put\",\n    data,\n  });\n}\n\nexport async function apiPostStock(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/stock/register\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiNewPurchaseOrderoRegister(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/purchase/order/register\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiUpdatePurchaseOrder(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/purchase/order/update/id\",\n    method: \"put\",\n    data,\n  });\n}\n\nexport async function apiGetAllPurchaseOrderWithPagination(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/purchase/order\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiGetPurchaseOrderDetailsByPurchaseORderId(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/purchase/order/id\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiUpdatePurchaseOrderListByPurchaseOrderListId(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/purchase/order/list/id\",\n    method: \"put\",\n    data,\n  });\n}\n\nexport async function apiGetAllGRN(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/purchase/order/list/grn\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiGetGRNDetails(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/purchase/order/list/grn/details\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiUpdatePurchaseOrderListByPurchaseOrderListIdOnQuantityReceived(\n  data\n) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/purchase/order/list/quantity/id\",\n    method: \"put\",\n    data,\n  });\n}\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nmodule.exports = trimmedEndIndex;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport {\n  apiGetAllProductCodeOption,\n  apiGetAllStock,\n  apiDeleteStock,\n  apiPostStock,\n  apiPutStock,\n} from \"../../../../services/SuperAdmin/Stock/StockService\";\n\nexport const getAllStock = createAsyncThunk(\"stock/data/all\", async (data) => {\n  try {\n    const response = await apiGetAllStock(data);\n    return response;\n  } catch (error) {\n    return error?.response || error.toString();\n  }\n});\n\nexport const getAllProductCodeOption = createAsyncThunk(\n  \"stock/product/code/option\",\n  async () => {\n    try {\n      const response = await apiGetAllProductCodeOption();\n      return response;\n    } catch (error) {\n      return error?.response || error.toString();\n    }\n  }\n);\n\nexport const putStock = createAsyncThunk(\"stock/data/put\", async (data) => {\n  try {\n    const response = await apiPutStock(data);\n    return response;\n  } catch (error) {\n    return error?.response || error.toString();\n  }\n});\n\nexport const postStock = createAsyncThunk(\"stock/data/post\", async (data) => {\n  try {\n    const response = await apiPostStock(data);\n    return response;\n  } catch (error) {\n    return error?.response || error.toString();\n  }\n});\n\nexport const deleteStock = createAsyncThunk(\n  \"Stock/data/delete\",\n  async (data) => {\n    try {\n      const response = await apiDeleteStock(data);\n      return response;\n    } catch (error) {\n      return error?.response || error.toString();\n    }\n  }\n);\n\nexport const initialTableData = {\n  query: \"\",\n  pageIndex: 1,\n  pageSize: 10,\n  total: 0,\n};\n\nexport const initialFilterData = { status: \"\" };\n\nconst dataSlice = createSlice({\n  name: \"stock/data\",\n  initialState: {\n    loading: true,\n    stock: [],\n    productCodes: [],\n    tableData: initialTableData,\n    filterData: initialFilterData,\n  },\n  reducers: {\n    setTableData: (state, action) => {\n      state.tableData = action.payload;\n    },\n    setFilterData: (state, action) => {\n      state.filterData = action.payload;\n    },\n  },\n  extraReducers: {\n    [getAllProductCodeOption.fulfilled]: (state, action) => {\n      state.productCodes = action.payload.data?.data || [];\n    },\n    [getAllStock.fulfilled]: (state, action) => {\n      state.stock = action.payload.data?.data || [];\n      state.tableData.total = action?.payload?.data?.total || 0;\n      state.loading = false;\n    },\n    [getAllProductCodeOption.pending]: (state) => {\n      state.loading = true;\n    },\n    [postStock.fulfilled]: (state) => {},\n    [deleteStock.fulfilled]: (state) => {},\n    [putStock.fulfilled]: (state) => {},\n  },\n});\n\nexport const { setTableData, setFilterData } = dataSlice.actions;\n\nexport default dataSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst stateSlice = createSlice({\n  name: \"stock/state\",\n  initialState: {\n    deleteConfirmation: false,\n    addDialog: false,\n    editDialog: false,\n    selectedStock: {},\n  },\n  reducers: {\n    toggleDeleteConfirmation: (state, action) => {\n      state.deleteConfirmation = action.payload;\n    },\n    toggleAddDialog: (state, action) => {\n      state.addDialog = action.payload;\n    },\n    toggleEditDialog: (state, action) => {\n      state.editDialog = action.payload;\n    },\n    setSelectedStock: (state, action) => {\n      state.selectedStock = action.payload;\n    },\n  },\n});\n\nexport const {\n  toggleDeleteConfirmation,\n  setSelectedStock,\n  toggleAddDialog,\n  toggleEditDialog,\n} = stateSlice.actions;\n\nexport default stateSlice.reducer;\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  Input,\n  Button,\n  Toast,\n  Notification,\n  FormItem,\n  Dialog,\n  FormContainer,\n  Select,\n  DatePicker,\n} from \"../../../../components/ui\";\nimport { Field, Form, Formik } from \"formik\";\nimport { toggleAddDialog } from \"../store/stateSlice\";\nimport * as Yup from \"yup\";\nimport { getAllStock, postStock, putStock } from \"../store/dataSlice\";\nimport { getAllProductCodeOption } from \"../store/dataSlice\";\nimport dayjs from \"dayjs\";\n\nconst validationSchema = Yup.object().shape({\n  vendor_id: Yup.number().required(\"Vendor is required\"),\n  category_id: Yup.number().required(\"Category is required\"),\n  product_id: Yup.number().required(\"Product is required\"),\n  stock_default_mrp: Yup.number().required(\"Default MRP is required\"),\n  stock_expiry_date: Yup.date().required(\"Expiry date is required\"),\n  stock_retailer_price: Yup.number().required(\"Retailer price is required\"),\n  stock_wholesaler_price: Yup.number().required(\"Wholesaler price is required\"),\n  stock_purchase_price: Yup.number().required(\"price is required\"),\n  stock_discount_type: Yup.string().required(\"Discount type is required\"),\n  stock_discount: Yup.number().required(\"Discount is required\"),\n});\n\nconst statusOption = [\n  { label: \"Active\", value: true },\n  { label: \"In-Active\", value: false },\n];\n\nconst StockDialogueForm = () => {\n  const dispatch = useDispatch();\n  const [stock, setStock] = useState({});\n  const [edit, SetEdit] = useState(null);\n\n  const dialogOpen = useSelector((state) => state.stock.state.addDialog);\n  const selectedStock = useSelector((state) => state.stock.state.selectedStock);\n  const productCodes = useSelector((state) => state.stock.data.productCodes);\n\n  const tableData = useSelector((state) => state.stock.tableData);\n\n  useEffect(() => {\n    if (Object.keys(selectedStock).length > 0) {\n      setStock({\n        ...selectedStock,\n      });\n      SetEdit(true);\n    } else {\n      setStock({\n        product_id: \"\",\n        stock_cost: \"\",\n        stock_status: \"\",\n        stock_quantity: \"\",\n        stock_expiry_date: \"\",\n        stock_storage_location: \"\",\n        stock_entry_date: new Date(),\n      });\n      SetEdit(false);\n    }\n  }, [selectedStock]);\n\n  const onDialogClose = () => {\n    dispatch(toggleAddDialog(false));\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      dispatch(getAllProductCodeOption());\n    };\n    fetchData();\n  }, [dispatch]);\n\n  return (\n    <Dialog\n      isOpen={dialogOpen}\n      onClose={onDialogClose}\n      onRequestClose={onDialogClose}\n      width={600}\n    >\n      <Formik\n        initialValues={stock}\n        enableReinitialize=\"true\"\n        // validationSchema={validationSchema}\n        onSubmit={async (values, { setSubmitting }) => {\n          setSubmitting(true);\n          let finalValues = {\n            ...values,\n            stock_expiry_date: dayjs(values.stock_expiry_date).format(\n              \"YYYY-MM-DD\"\n            ),\n          };\n          try {\n            if (edit) {\n              const success = await dispatch(putStock(finalValues));\n              const successTitle = success?.payload?.data?.success\n                ? \"Successfully Edited\"\n                : \"Not Edited\";\n              const successType = success?.payload?.data?.success\n                ? \"success\"\n                : \"danger\";\n              const message = success?.payload?.data?.message;\n              Toast.push(\n                <Notification\n                  title={successTitle}\n                  type={successType}\n                  duration={2500}\n                >\n                  {message}\n                </Notification>\n              );\n              dispatch(getAllStock(tableData));\n              dispatch(toggleAddDialog(!success.data.success));\n            } else {\n              const success = await dispatch(postStock(finalValues));\n              const successTitle = success?.payload?.data?.success\n                ? \"Successfully Added\"\n                : \"Not Added\";\n              const successType = success?.payload?.data?.success\n                ? \"success\"\n                : \"danger\";\n              const message = success?.payload?.data?.message;\n              Toast.push(\n                <Notification\n                  title={successTitle}\n                  type={successType}\n                  duration={2500}\n                >\n                  {message}\n                </Notification>\n              );\n              dispatch(getAllStock(tableData));\n              dispatch(toggleAddDialog(!success.data.success));\n            }\n          } catch (err) {\n            const errorTitle = edit ? \"Not Edited\" : \"Not Added\";\n            const errorType = \"danger\";\n            const errorMessage = err?.response?.data?.message;\n\n            Toast.push(\n              <Notification title={errorTitle} type={errorType} duration={2500}>\n                {errorMessage}\n              </Notification>\n            );\n\n            dispatch(toggleAddDialog(true));\n          } finally {\n            setSubmitting(false);\n          }\n        }}\n      >\n        {({ touched, errors, values, isSubmitting }) => {\n          return (\n            <Form>\n              <FormContainer>\n                <div className=\"flex items-center justify-center\">\n                  {edit ? (\n                    <h5 className=\"mb-4 ml-3\">Edit Stock</h5>\n                  ) : (\n                    <h5 className=\"mb-4 ml-3\">New Stock</h5>\n                  )}\n                </div>\n                <div className=\"grid grid-cols-3 gap-3 gap-y-0 ml-2 mr-2\">\n                  {edit && (\n                    <FormItem\n                      label=\"Status\"\n                      className=\"mb-2\"\n                      // invalid={errors.worker_status && touched.worker_status}\n                      // errorMessage={errors.worker_status}\n                    >\n                      <Field name=\"stock_status\">\n                        {({ field, form }) => (\n                          <Select\n                            placeholder=\"Status\"\n                            field={field}\n                            className=\"text-left\"\n                            form={form}\n                            options={statusOption}\n                            value={statusOption.filter(\n                              (status) => status.value === values.stock_status\n                            )}\n                            onChange={(status) => {\n                              form.setFieldValue(field.name, status.value);\n                            }}\n                          />\n                        )}\n                      </Field>\n                    </FormItem>\n                  )}\n                  <FormItem\n                    label=\"Product Code\"\n                    // invalid={errors.vendor_id && touched.vendor_id}\n                    // errorMessage={errors.vendor_id}\n                  >\n                    <Field name=\"product_id\">\n                      {({ field, form }) => (\n                        <Select\n                          field={field}\n                          form={form}\n                          options={productCodes}\n                          value={productCodes?.filter(\n                            (option) => option.value === values.product_id\n                          )}\n                          onChange={(option) =>\n                            form.setFieldValue(field.name, option.value)\n                          }\n                        />\n                      )}\n                    </Field>\n                  </FormItem>\n\n                  <FormItem\n                    label=\"Cost\"\n                    // invalid={\n                    //   errors.stock_default_mrp && touched.stock_default_mrp\n                    // }\n                    // errorMessage={errors.stock_default_mrp}\n                  >\n                    <Field\n                      type=\"number\"\n                      name=\"stock_cost\"\n                      placeholder=\"Cost\"\n                      component={Input}\n                    />\n                  </FormItem>\n                  <FormItem\n                    label=\"Quantity\"\n                    // invalid={\n                    //   errors.stock_default_mrp && touched.stock_default_mrp\n                    // }\n                    // errorMessage={errors.stock_default_mrp}\n                  >\n                    <Field\n                      type=\"number\"\n                      name=\"stock_quantity\"\n                      placeholder=\"Quantity\"\n                      component={Input}\n                    />\n                  </FormItem>\n                  <FormItem\n                    label=\"Expiry date\"\n                    invalid={\n                      errors.stock_expiry_date && touched.stock_expiry_date\n                    }\n                    errorMessage={errors.stock_expiry_date}\n                  >\n                    <Field\n                      type=\"text\"\n                      name=\"stock_expiry_date\"\n                      placeholder=\"YYYY-MM-DD\"\n                      value={\n                        edit\n                          ? dayjs(values.stock_expiry_date).format(\"YYYY-MM-DD\")\n                          : values.stock_expiry_date\n                      }\n                      component={Input}\n                    />\n                  </FormItem>\n                  <FormItem\n                    label=\"Storage Location\"\n                    // invalid={\n                    //   errors.stock_default_mrp && touched.stock_default_mrp\n                    // }\n                    // errorMessage={errors.stock_default_mrp}\n                  >\n                    <Field\n                      type=\"text\"\n                      name=\"stock_storage_location\"\n                      placeholder=\"Storage Location\"\n                      component={Input}\n                    />\n                  </FormItem>\n                  <FormItem\n                    className=\"mb-4\"\n                    label=\"Stock Entry Date\"\n                    // invalid={errors && touched}\n                    // errorMessage={errors}\n                  >\n                    <Field name=\"stock_entry_date\">\n                      {({ field, form }) => (\n                        <DatePicker\n                          placeholder=\"Stock Entry Date\"\n                          field={field}\n                          form={form}\n                          value={field.value}\n                          onChange={(date) => {\n                            form.setFieldValue(field.name, date);\n                          }}\n                        />\n                      )}\n                    </Field>\n                  </FormItem>\n                </div>\n\n                <div className=\"justify-end flex gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"\"\n                    size=\"sm\"\n                    className=\"ltr:mr-2 rtl:ml-2\"\n                    onClick={onDialogClose}\n                  >\n                    Discard\n                  </Button>\n                  <Button\n                    variant=\"solid\"\n                    loading={isSubmitting}\n                    size=\"sm\"\n                    className=\"ml-1\"\n                    type=\"submit\"\n                  >\n                    {isSubmitting ? \"Please wait\" : edit ? \"Update\" : \"Create\"}\n                  </Button>\n                </div>\n              </FormContainer>\n            </Form>\n          );\n        }}\n      </Formik>\n    </Dialog>\n  );\n};\n\nexport default StockDialogueForm;\n","import React, { useCallback, useEffect, useMemo, useRef } from \"react\";\nimport { Badge, Tooltip } from \"../../../../components/ui\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport DataTable from \"../../../../components/shared/DataTable\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport { getAllStock, setTableData } from \"../store/dataSlice\";\nimport { HiOutlinePencil, HiOutlineTrash } from \"react-icons/hi\";\nimport useThemeClass from \"../../../../utils/hooks/useThemeClass\";\nimport {\n  setSelectedStock,\n  toggleDeleteConfirmation,\n  toggleAddDialog,\n} from \"../store/stateSlice\";\nimport StockDeleteConfirmation from \"./StockDeleteConfirmation\";\nimport StockDialogueForm from \"./StockForm\";\nimport { NumericFormat } from \"react-number-format\";\nimport { useNavigate } from \"react-router-dom\";\nimport dayjs from \"dayjs\";\n\nconst statusColor = {\n  true: {\n    label: \"In-Stock\",\n    dotClass: \"bg-emerald-500\",\n    textClass: \"text-emerald-500\",\n  },\n  outofstock: {\n    false: \"Out-Of-Stock\",\n    dotClass: \"bg-red-500\",\n    textClass: \"text-red-500\",\n  },\n};\n\nconst ActionColumn = ({ row }) => {\n  const dispatch = useDispatch();\n  const { textTheme } = useThemeClass();\n\n  const onEdit = () => {\n    dispatch(toggleAddDialog(true));\n    dispatch(setSelectedStock(row));\n  };\n\n  const onDelete = () => {\n    dispatch(toggleDeleteConfirmation(true));\n    dispatch(setSelectedStock(row));\n  };\n\n  return (\n    <div className=\"flex text-lg\">\n      <span\n        className={`cursor-pointer p-2 hover:${textTheme}`}\n        onClick={onEdit}\n      >\n        <HiOutlinePencil />\n      </span>\n      <span\n        className=\"cursor-pointer p-2 hover:text-red-500\"\n        onClick={onDelete}\n      >\n        <HiOutlineTrash />\n      </span>\n    </div>\n  );\n};\n\nconst StockTable = () => {\n  const dispatch = useDispatch();\n\n  const columns = useMemo(\n    () => [\n      {\n        header: \"p.Code\",\n        accessorKey: \"Product\",\n        cell: (props) => {\n          const row = props.row.original;\n          return (\n            <div className=\"flex items-center\">\n              {row?.Product?.product_code}\n            </div>\n          );\n        },\n      },\n      {\n        header: \"product \",\n        accessorKey: \"Product\",\n        cell: (props) => {\n          const row = props.row.original;\n          return <div className=\"flex items-center\">{row?.Product?.name}</div>;\n        },\n      },\n      {\n        header: \"category\",\n        accessorKey: \"Product\",\n        cell: (props) => {\n          const row = props.row.original;\n          return (\n            <div className=\"flex items-center\">\n              {\" \"}\n              {row?.Product?.Category?.name}\n            </div>\n          );\n        },\n      },\n      {\n        header: \"current Stock\",\n        accessorKey: \"\",\n        cell: (props) => {\n          const row = props.row.original;\n          return <div className=\"flex items-center\"> {row?.current_stock}</div>;\n        },\n      },\n      // {\n      //   header: \"Cost\",\n      //   accessorKey: \"\",\n      //   cell: (props) => {\n      //     const row = props.row.original;\n      //     return (\n      //       <div className=\"flex items-center\">\n      //         <NumericFormat\n      //           displayType=\"text\"\n      //           value={row?.stock_cost}\n      //           prefix={\"₹ \"}\n      //           thousandSeparator={true}\n      //           thousandsGroupStyle=\"lakh\"\n      //         />\n      //       </div>\n      //     );\n      //   },\n      // },\n      // {\n      //   header: \"status\",\n      //   accessorKey: \"stock_status\",\n      //   cell: (props) => {\n      //     const row = props.row.original;\n      //     return (\n      //       <div className=\"flex items-center\">\n      //         <Badge className={statusColor[row?.stock_status].dotClass} />\n      //         <span\n      //           className={`ml-2 font-semibold capitalize ${\n      //             statusColor[row?.stock_status].textClass\n      //           }`}\n      //         >\n      //           {statusColor[row?.stock_status].label}\n      //         </span>\n      //       </div>\n      //     );\n      //   },\n      // },\n      // {\n      //   header: \"Storage Location\",\n      //   accessorKey: \"\",\n      //   cell: (props) => {\n      //     const row = props.row.original;\n      //     return (\n      //       <div className=\"flex items-center\">\n      //         {row?.stock_storage_location}\n      //       </div>\n      //     );\n      //   },\n      // },\n      // {\n      //   header: \"Entry Date\",\n      //   accessorKey: \"\",\n      //   cell: (props) => {\n      //     const row = props.row.original;\n      //     return (\n      //       <div className=\"flex items-center\">{row?.stock_entry_date}</div>\n      //     );\n      //   },\n      // },\n      // {\n      //   header: \"Expiry Date\",\n      //   accessorKey: \"\",\n      //   cell: (props) => {\n      //     const row = props.row.original;\n      //     return (\n      //       <div className=\"flex items-center\">{row?.stock_expiry_date}</div>\n      //     );\n      //   },\n      // },\n      // {\n      //   header: \"Action\",\n      //   accessorKey: \"\",\n      //   cell: (props) => {\n      //     const row = props.row.original;\n      //     return <ActionColumn row={row} />;\n      //   },\n      // },\n    ],\n    []\n  );\n\n  const data = useSelector((state) => state.stock.data.stock);\n  const loading = useSelector((state) => state.stock.data.loading);\n  const { status } = useSelector((state) => state.stock.data.filterData);\n\n  const { pageIndex, pageSize, query, total } = useSelector(\n    (state) => state.stock.data.tableData\n  );\n\n  console.log(total);\n\n  const fetchData = useCallback(() => {\n    dispatch(getAllStock({ pageIndex, pageSize, query, status }));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [pageIndex, pageSize, query, status, total]);\n\n  useEffect(() => {\n    fetchData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [pageIndex, pageSize, query, status, total]);\n\n  const tableData = useMemo(\n    () => ({ pageIndex, pageSize, query, total, status }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [pageIndex, pageSize, query, total, status]\n  );\n\n  const onPaginationChange = (page) => {\n    const newTableData = cloneDeep(tableData);\n    newTableData.pageIndex = page;\n    dispatch(setTableData(newTableData));\n  };\n\n  const onSelectChange = (value) => {\n    const newTableData = cloneDeep(tableData);\n    newTableData.pageSize = Number(value);\n    newTableData.pageIndex = 1;\n    dispatch(setTableData(newTableData));\n  };\n\n  return (\n    <>\n      <DataTable\n        columns={columns}\n        data={data}\n        loading={loading}\n        pagingData={{ pageIndex, pageSize, query, total, status }}\n        onPaginationChange={onPaginationChange}\n        onSelectChange={onSelectChange}\n      />\n    </>\n  );\n};\n\nexport default StockTable;\n","import React, { useRef } from \"react\";\nimport { Input } from \"../../../../components/ui\";\nimport { HiOutlineSearch } from \"react-icons/hi\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport debounce from \"lodash/debounce\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport { getAllStock, setTableData } from \"../store/dataSlice\";\n\nconst StockTableSearch = () => {\n  const dispatch = useDispatch();\n\n  const searchInput = useRef();\n\n  const tableData = useSelector((state) => state.stock.data.tableData);\n\n  console.log(tableData);\n\n  const debounceFn = debounce(handleDebounceFn, 500);\n\n  function handleDebounceFn(val) {\n    const newTableData = cloneDeep(tableData);\n    newTableData.query = val;\n    newTableData.pageIndex = 1;\n    if (typeof val === \"string\" && val.length > 0) {\n      fetchData(newTableData);\n    }\n\n    if (typeof val === \"string\" && val.length === 0) {\n      fetchData(newTableData);\n    }\n  }\n\n  const fetchData = (data) => {\n    dispatch(getAllStock(data));\n    dispatch(setTableData(data));\n  };\n\n  const onEdit = (e) => {\n    debounceFn(e.target.value);\n  };\n\n  return (\n    <Input\n      ref={searchInput}\n      className=\"max-w-lg md:w-52\"\n      size=\"sm\"\n      placeholder=\"Search Stock\"\n      prefix={<HiOutlineSearch className=\"text-lg\" />}\n      onChange={onEdit}\n    />\n  );\n};\n\nexport default StockTableSearch;\n","import React from \"react\";\nimport { Select, Badge } from \"../../../../components/ui\";\nimport { setFilterData } from \"../store/dataSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { components } from \"react-select\";\nimport { HiCheck } from \"react-icons/hi\";\n\nconst { Control } = components;\n\nconst options = [\n  { value: \"\", label: \"All\", color: \"bg-gray-500\" },\n  { value: true, label: \"In-Stock\", color: \"bg-emerald-500\" },\n  { value: false, label: \"Out-Of-Stock\", color: \"bg-red-500\" },\n];\n\nconst CustomSelectOption = ({ innerProps, label, data, isSelected }) => {\n  return (\n    <div\n      className={`flex items-center justify-between p-2 cursor-pointer ${\n        isSelected\n          ? \"bg-gray-100 dark:bg-gray-500\"\n          : \"hover:bg-gray-50 dark:hover:bg-gray-600\"\n      }`}\n      {...innerProps}\n    >\n      <div className=\"flex items-center gap-2\">\n        <Badge innerClass={data.color} />\n        <span>{label}</span>\n      </div>\n      {isSelected && <HiCheck className=\"text-emerald-500 text-xl\" />}\n    </div>\n  );\n};\n\nconst CustomControl = ({ children, ...props }) => {\n  const selected = props.getValue()[0];\n  return (\n    <Control {...props}>\n      {selected && (\n        <Badge className=\"ltr:ml-4 rtl:mr-4\" innerClass={selected.color} />\n      )}\n      {children}\n    </Control>\n  );\n};\n\nconst StockTableFilter = () => {\n  const dispatch = useDispatch();\n\n  const { status } = useSelector((state) => state.stock.data.filterData);\n\n  const onStatusFilterChange = (selected) => {\n    dispatch(setFilterData({ status: selected.value }));\n  };\n\n  return (\n    <Select\n      options={options}\n      size=\"sm\"\n      className=\"min-w-[130px]\"\n      onChange={onStatusFilterChange}\n      components={{\n        Option: CustomSelectOption,\n        Control: CustomControl,\n      }}\n      value={options.filter((option) => option.value === status)}\n    />\n  );\n};\n\nexport default StockTableFilter;\n","import React from \"react\";\nimport StockTableSearch from \"./StockTableSearch\";\nimport StockTableFilter from \"./StockTableFilter\";\nimport { Button } from \"../../../../components/ui\";\nimport { HiPlusCircle } from \"react-icons/hi\";\nimport { useDispatch } from \"react-redux\";\nimport { toggleAddDialog, setSelectedStock } from \"../store/stateSlice\";\n\nconst StockTableTools = () => {\n  const dispatch = useDispatch();\n  const onAdd = () => {\n    dispatch(setSelectedStock({}));\n    dispatch(toggleAddDialog(true));\n  };\n  return (\n    <div className=\"flex flex-col lg:flex-row lg:items-center gap-2\">\n      <StockTableSearch />\n      {/* <StockTableFilter />\n      <Button\n        onClick={onAdd}\n        variant=\"solid\"\n        size=\"sm\"\n        icon={<HiPlusCircle className=\"mr-1\" />}\n        className=\"block lg:inline-block md:mb-0 mb-4 h-full\"\n      >\n        Add Stock\n      </Button> */}\n    </div>\n  );\n};\n\nexport default StockTableTools;\n","import { combineReducers } from \"@reduxjs/toolkit\";\nimport data from \"./dataSlice\";\nimport state from \"./stateSlice\";\nconst stockReducer = combineReducers({\n  data,\n  state,\n});\n\nexport default stockReducer;\n","import React from \"react\";\nimport StockTable from \"./components/StockTable\";\nimport StockTableTools from \"./components/StockTableTools\";\nimport { injectReducer } from \"../../../store\";\nimport stockReducer from \"./store\";\nimport { AdaptableCard } from \"../../../components/shared\";\n\ninjectReducer(\"stock\", stockReducer);\n\nconst Stock = () => {\n  return (\n    <AdaptableCard className=\"h-full\" bodyClass=\"h-full\">\n      <div className=\"lg:flex items-center justify-between mb-4\">\n        <h3 className=\"mb-4 lg:mb-0\">Stock</h3>\n        <StockTableTools />\n      </div>\n      <StockTable />\n    </AdaptableCard>\n  );\n};\n\nexport default Stock;\n","var baseTrim = require('./_baseTrim'),\n    isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n","var trimmedEndIndex = require('./_trimmedEndIndex');\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nmodule.exports = baseTrim;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Table, Skeleton } from '../../../components/ui'\n\nconst { Tr, Td, TBody } = Table\n\nconst TableRowSkeleton = (props) => {\n    const { columns, rows, avatarInColumns, avatarProps } = props\n\n    return (\n        <TBody>\n            {Array.from(new Array(rows), (_, i) => i + 0).map((row) => (\n                <Tr key={`row-${row}`}>\n                    {Array.from(new Array(columns), (_, i) => i + 0).map(\n                        (col) => (\n                            <Td key={`col-${col}`}>\n                                <div className=\"flex flex-auto items-center gap-2\">\n                                    {avatarInColumns.includes(col) && (\n                                        <div>\n                                            <Skeleton\n                                                variant=\"circle\"\n                                                {...avatarProps}\n                                            />\n                                        </div>\n                                    )}\n                                    <Skeleton />\n                                </div>\n                            </Td>\n                        )\n                    )}\n                </Tr>\n            ))}\n        </TBody>\n    )\n}\n\nTableRowSkeleton.propTypes = {\n    columns: PropTypes.number,\n    rows: PropTypes.number,\n    avatarInColumns: PropTypes.arrayOf(PropTypes.number),\n}\n\nTableRowSkeleton.defaultProps = {\n    columns: 1,\n    rows: 10,\n    avatarInColumns: [],\n}\n\nexport default TableRowSkeleton\n","import React, {\n  forwardRef,\n  useMemo,\n  useRef,\n  useEffect,\n  useState,\n  useImperativeHandle,\n} from \"react\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport {\n  Table,\n  Pagination,\n  Select,\n  Checkbox,\n  Alert,\n} from \"../../components/ui\";\nimport TableRowSkeleton from \"./loaders/TableRowSkeleton\";\nimport Loading from \"./Loading\";\nimport {\n  useReactTable,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  flexRender,\n} from \"@tanstack/react-table\";\n\nconst { Tr, Th, Td, THead, TBody } = Table;\n\nconst IndeterminateCheckbox = (props) => {\n  const {\n    indeterminate,\n    onChange,\n    onCheckBoxChange,\n    onIndeterminateCheckBoxChange,\n    ...rest\n  } = props;\n\n  const ref = useRef(null);\n\n  useEffect(() => {\n    if (typeof indeterminate === \"boolean\") {\n      ref.current.indeterminate = !rest.checked && indeterminate;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref, indeterminate]);\n\n  const handleChange = (e) => {\n    onChange(e);\n    onCheckBoxChange?.(e);\n    onIndeterminateCheckBoxChange?.(e);\n  };\n\n  return (\n    <Checkbox\n      className=\"mb-0\"\n      ref={ref}\n      onChange={(_, e) => handleChange(e)}\n      {...rest}\n    />\n  );\n};\n\nconst DataTable = forwardRef((props, ref) => {\n  const {\n    skeletonAvatarColumns,\n    columns: columnsProp,\n    data,\n    loading,\n    onCheckBoxChange,\n    onIndeterminateCheckBoxChange,\n    onPaginationChange,\n    onSelectChange,\n    onSort,\n    pageSizes,\n    selectable,\n    skeletonAvatarProps,\n    pagingData,\n    tableWidth = \"100%\",\n  } = props;\n\n  const { pageSize, pageIndex, total } = pagingData;\n\n  const [sorting, setSorting] = useState(null);\n\n  const pageSizeOption = useMemo(\n    () =>\n      pageSizes.map((number) => ({\n        value: number,\n        label: `${number} / page`,\n      })),\n    [pageSizes]\n  );\n\n  const handleCheckBoxChange = (checked, row) => {\n    if (!loading) {\n      onCheckBoxChange?.(checked, row);\n    }\n  };\n\n  const handleIndeterminateCheckBoxChange = (checked, rows) => {\n    if (!loading) {\n      onIndeterminateCheckBoxChange?.(checked, rows);\n    }\n  };\n\n  const handlePaginationChange = (page) => {\n    if (!loading) {\n      onPaginationChange?.(page);\n    }\n  };\n\n  const handleSelectChange = (value) => {\n    if (!loading) {\n      onSelectChange?.(Number(value));\n    }\n  };\n\n  useEffect(() => {\n    if (Array.isArray(sorting)) {\n      const sortOrder =\n        sorting.length > 0 ? (sorting[0].desc ? \"desc\" : \"asc\") : \"\";\n      const id = sorting.length > 0 ? sorting[0].id : \"\";\n      onSort?.({ order: sortOrder, key: id });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sorting]);\n\n  const hasOldColumnMetaKey = columnsProp.some(\n    (col) => col.Header || col.accessor || col.Cell\n  );\n\n  const finalColumns = useMemo(() => {\n    const columns = columnsProp.map((col) => ({\n      ...col,\n      size: col.size || undefined,\n      minSize: col.minSize || 100,\n      maxSize: col.maxSize || 300,\n    }));\n\n    if (selectable) {\n      return [\n        {\n          id: \"select\",\n          header: ({ table }) => (\n            <IndeterminateCheckbox\n              checked={table.getIsAllRowsSelected()}\n              indeterminate={table.getIsSomeRowsSelected()}\n              onChange={table.getToggleAllRowsSelectedHandler()}\n              onIndeterminateCheckBoxChange={(e) => {\n                handleIndeterminateCheckBoxChange(\n                  e.target.checked,\n                  table.getRowModel().rows\n                );\n              }}\n            />\n          ),\n          cell: ({ row }) => (\n            <IndeterminateCheckbox\n              checked={row.getIsSelected()}\n              disabled={!row.getCanSelect()}\n              indeterminate={row.getIsSomeSelected()}\n              onChange={row.getToggleSelectedHandler()}\n              onCheckBoxChange={(e) =>\n                handleCheckBoxChange(e.target.checked, row.original)\n              }\n            />\n          ),\n          size: 50,\n          minSize: 50,\n          maxSize: 50,\n        },\n        ...columns,\n      ];\n    }\n    return columns;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [columnsProp, selectable]);\n\n  const table = useReactTable({\n    data,\n    columns: hasOldColumnMetaKey ? [] : finalColumns,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    manualPagination: true,\n    manualSorting: true,\n    onSortingChange: setSorting,\n    state: {\n      sorting,\n    },\n    columnResizeMode: \"onChange\",\n  });\n\n  const resetSorting = () => {\n    table.resetSorting();\n  };\n\n  const resetSelected = () => {\n    table.toggleAllRowsSelected(false);\n  };\n\n  useImperativeHandle(ref, () => ({\n    resetSorting,\n    resetSelected,\n  }));\n\n  if (hasOldColumnMetaKey) {\n    const message =\n      \"You are using old react-table v7 column config, please use v8 column config instead, refer to our demo or https://tanstack.com/table/v8\";\n\n    if (process.env.NODE_ENV === \"development\") {\n      console.warn(message);\n    }\n\n    return <Alert>{message}</Alert>;\n  }\n\n  return (\n    <Loading loading={loading && data.length !== 0} type=\"cover\">\n      <div style={{ width: tableWidth, overflowX: \"auto\" }}>\n        <Table style={{ width: \"100%\", tableLayout: \"fixed\" }}>\n          <THead>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <Tr key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <Th\n                      key={header.id}\n                      colSpan={header.colSpan}\n                      style={{ width: `${header.column.getSize()}px` }}\n                    >\n                      {header.isPlaceholder ? null : (\n                        <div\n                          className={classNames(\n                            // header.column.getCanSort() && 'cursor-pointer select-none point',\n                            loading && \"pointer-events-none\"\n                          )}\n                          // onClick={header.column.getToggleSortingHandler()}\n                        >\n                          {flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                          {/* {header.column.getCanSort() && <Sorter sort={header.column.getIsSorted()} />} */}\n                        </div>\n                      )}\n                    </Th>\n                  );\n                })}\n              </Tr>\n            ))}\n          </THead>\n          {loading && data.length === 0 ? (\n            <TableRowSkeleton\n              columns={finalColumns.length}\n              rows={pagingData.pageSize}\n              avatarInColumns={skeletonAvatarColumns}\n              avatarProps={skeletonAvatarProps}\n            />\n          ) : (\n            <TBody>\n              {table\n                .getRowModel()\n                .rows.slice(0, pageSize)\n                .map((row) => {\n                  return (\n                    <Tr key={row.id}>\n                      {row.getVisibleCells().map((cell) => {\n                        return (\n                          <Td\n                            key={cell.id}\n                            style={{ width: `${cell.column.getSize()}px` }}\n                          >\n                            {flexRender(\n                              cell.column.columnDef.cell,\n                              cell.getContext()\n                            )}\n                          </Td>\n                        );\n                      })}\n                    </Tr>\n                  );\n                })}\n            </TBody>\n          )}\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-between mt-4\">\n        <Pagination\n          pageSize={pageSize}\n          currentPage={pageIndex}\n          total={total}\n          onChange={handlePaginationChange}\n        />\n        <div style={{ minWidth: 130 }}>\n          <Select\n            size=\"sm\"\n            menuPlacement=\"top\"\n            isSearchable={false}\n            value={pageSizeOption.filter((option) => option.value === pageSize)}\n            options={pageSizeOption}\n            onChange={(option) => handleSelectChange(option.value)}\n          />\n        </div>\n      </div>\n    </Loading>\n  );\n});\n\nDataTable.propTypes = {\n  columns: PropTypes.array,\n  data: PropTypes.array,\n  loading: PropTypes.bool,\n  onCheckBoxChange: PropTypes.func,\n  onIndeterminateCheckBoxChange: PropTypes.func,\n  onPaginationChange: PropTypes.func,\n  onSelectChange: PropTypes.func,\n  onSort: PropTypes.func,\n  pageSizes: PropTypes.arrayOf(PropTypes.number),\n  selectable: PropTypes.bool,\n  skeletonAvatarColumns: PropTypes.arrayOf(PropTypes.number),\n  skeletonAvatarProps: PropTypes.object,\n  pagingData: PropTypes.shape({\n    total: PropTypes.number,\n    pageIndex: PropTypes.number,\n    pageSize: PropTypes.number,\n  }),\n};\n\nDataTable.defaultProps = {\n  pageSizes: [10, 25, 50, 100],\n  pagingData: {\n    total: 0,\n    pageIndex: 1,\n    pageSize: 10,\n  },\n  data: [],\n  columns: [],\n  selectable: false,\n  loading: false,\n};\n\nexport default DataTable;\n","var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n"],"names":["root","require","module","exports","Date","now","async","apiGetAllProductCodeOption","ApiService","fetchData","url","method","apiGetAllStockData","data","apiGetAllStock","params","apiDeleteStock","apiPutStock","apiPostStock","apiNewPurchaseOrderoRegister","apiUpdatePurchaseOrder","apiGetAllPurchaseOrderWithPagination","reWhitespace","string","index","length","test","charAt","getAllStock","createAsyncThunk","error","response","toString","getAllProductCodeOption","putStock","postStock","deleteStock","dataSlice","createSlice","name","initialState","loading","stock","productCodes","tableData","query","pageIndex","pageSize","total","filterData","status","reducers","setTableData","state","action","payload","setFilterData","extraReducers","fulfilled","_action$payload$data","_action$payload$data2","_action$payload","_action$payload$data3","pending","actions","stateSlice","deleteConfirmation","addDialog","editDialog","selectedStock","toggleDeleteConfirmation","toggleAddDialog","toggleEditDialog","setSelectedStock","Yup","shape","vendor_id","required","category_id","product_id","stock_default_mrp","stock_expiry_date","stock_retailer_price","stock_wholesaler_price","stock_purchase_price","stock_discount_type","stock_discount","StockTable","dispatch","useDispatch","columns","useMemo","header","accessorKey","cell","props","_row$Product","row","original","_jsx","className","children","Product","product_code","_row$Product2","_row$Product3","_row$Product3$Categor","_jsxs","Category","current_stock","useSelector","console","log","useCallback","useEffect","_Fragment","DataTable","pagingData","onPaginationChange","page","newTableData","cloneDeep","onSelectChange","value","Number","StockTableSearch","searchInput","useRef","debounceFn","debounce","val","Input","ref","size","placeholder","prefix","HiOutlineSearch","onChange","e","target","Control","components","StockTableTools","combineReducers","injectReducer","stockReducer","Stock","AdaptableCard","bodyClass","baseTrim","isObject","isSymbol","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","other","valueOf","isBinary","slice","trimmedEndIndex","reTrimStart","replace","Tr","Td","TBody","Table","TableRowSkeleton","rows","avatarInColumns","avatarProps","Array","from","_","i","map","col","includes","Skeleton","variant","defaultProps","Th","THead","IndeterminateCheckbox","indeterminate","onCheckBoxChange","onIndeterminateCheckBoxChange","rest","current","checked","Checkbox","handleChange","forwardRef","skeletonAvatarColumns","columnsProp","onSort","pageSizes","selectable","skeletonAvatarProps","tableWidth","sorting","setSorting","useState","pageSizeOption","number","label","isArray","sortOrder","desc","id","order","key","hasOldColumnMetaKey","some","Header","accessor","Cell","finalColumns","undefined","minSize","maxSize","_ref","table","getIsAllRowsSelected","getIsSomeRowsSelected","getToggleAllRowsSelectedHandler","handleIndeterminateCheckBoxChange","getRowModel","_ref2","getIsSelected","disabled","getCanSelect","getIsSomeSelected","getToggleSelectedHandler","handleCheckBoxChange","useReactTable","getCoreRowModel","getFilteredRowModel","getPaginationRowModel","getSortedRowModel","manualPagination","manualSorting","onSortingChange","columnResizeMode","resetSorting","resetSelected","toggleAllRowsSelected","useImperativeHandle","message","Alert","Loading","type","style","width","overflowX","tableLayout","getHeaderGroups","headerGroup","headers","colSpan","column","getSize","isPlaceholder","classNames","flexRender","columnDef","getContext","getVisibleCells","Pagination","currentPage","minWidth","Select","menuPlacement","isSearchable","filter","option","options","handleSelectChange","toNumber","nativeMax","Math","max","nativeMin","min","func","wait","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","time","args","thisArg","apply","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","setTimeout","timeWaiting","remainingWait","debounced","isInvoking","arguments","this","leadingEdge","clearTimeout","cancel","flush"],"sourceRoot":""}