{"version":3,"file":"static/js/7530.57360e57.chunk.js","mappings":"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","sources":["view/SuperAdmin/Task/Message/store/dataSlice.js","view/SuperAdmin/Task/Message/components/Message.js","view/SuperAdmin/Task/Message/store/stateSlice.js","view/SuperAdmin/Task/Message/store/index.js","view/SuperAdmin/Task/Message/index.js","services/SuperAdmin/Task/TaskService.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nimport {\n  apiGetChatByTaskId,\n  apiPostChat,\n  apiGetUserStatus,\n} from \"../../../../../services/SuperAdmin/Task/TaskService\";\n\nexport const getChatByTaskId = createAsyncThunk(\n  \"task/data/get/chatById\",\n  async (data) => {\n    try {\n      const response = await apiGetChatByTaskId(data);\n      return response;\n    } catch (error) {\n      return error?.response;\n    }\n  }\n);\n\nexport const getUserStatus = createAsyncThunk(\n  \"task/data/get/user/status\",\n  async (data) => {\n    try {\n      const response = await apiGetUserStatus(data);\n      return response;\n    } catch (error) {\n      return error?.response;\n    }\n  }\n);\n\nexport const postChat = createAsyncThunk(\n  \"task/data/post/chat\",\n  async (data) => {\n    try {\n      const response = await apiPostChat(data);\n      return response;\n    } catch (error) {\n      return error?.response;\n    }\n  }\n);\n\nexport const initialTableData = {\n  total: 0,\n  pageIndex: 1,\n  pageSize: 10,\n  query: \"\",\n};\n\nconst dataSlice = createSlice({\n  name: \"chat/data\",\n  initialState: {\n    loading: false,\n    chatByIdList: [],\n    userStatus: \"Offline\",\n    tableData: initialTableData,\n  },\n  reducers: {\n    setTableData: (state, action) => {\n      state.tableData = action.payload;\n    },\n  },\n  extraReducers: {\n    [getChatByTaskId.fulfilled]: (state, action) => {\n      state.chatByIdList = action.payload.data?.data || [];\n      state.tableData.total = action.payload.data.total || 0;\n      state.loading = false;\n    },\n    [getChatByTaskId.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [postChat.fulfilled]: (state, action) => {},\n    [getUserStatus.fulfilled]: (state, action) => {\n      state.userStatus = action.payload.data.data || \"Offline\";\n    },\n  },\n});\n\nexport const { setTableData, setFilterData } = dataSlice.actions;\n\nexport default dataSlice.reducer;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { IoMdSend } from \"react-icons/io\";\nimport Wallpaper from \"../images/wallpaper.png\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getChatByTaskId, getUserStatus, postChat } from \"../store/dataSlice\";\nimport { useLocation } from \"react-router-dom\";\nimport profile from \"./image/profile.jpg\";\n\nconst ChatPage = () => {\n  const dispatch = useDispatch();\n  const location = useLocation();\n\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  // const selectedChat = useSelector((state) => state.task.state.selectedChat);\n  const userID = useSelector((state) => state.auth.user.user_id);\n\n  const chatMessage = useSelector((state) => state.chat.data.chatByIdList);\n  const userStatus = useSelector((state) => state.chat.data.userSatus);\n\n  const socket = useSelector((state) => state.socket.instance);\n\n  const record = location.state?.record;\n\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollTop = messagesEndRef.current.scrollHeight;\n    }\n  };\n\n  useEffect(() => {\n    dispatch(getChatByTaskId({ task_id: record.task_id }));\n    dispatch(getUserStatus({ user_id: record.assigned_to }));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (!socket) return;\n\n    // const handleReply = (message) => {\n    //   console.log(\"Received message:\", message);\n\n    //   setMessages((prevMessages) => [\n    //     ...prevMessages,\n    //     {\n    //       task_id: message.data?.task_id || null,\n    //       receiver_id: message.data?.receiver_id || null,\n    //       sender_id: message.data?.sender_id || null,\n    //       message: message.data?.message || \"\",\n    //     },\n    //   ]);\n    // };\n\n    const handleReply = (message) => {\n      console.log(\"Received message:\", message);\n\n      const newMsg = message?.data?.dataValues;\n      if (!newMsg) return;\n\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        {\n          task_id: newMsg.task_id || null,\n          receiver_id: newMsg.receiver_id || null,\n          sender_id: newMsg.sender_id || null,\n          message: newMsg.message || \"\",\n          id: newMsg.task__chat_id || Date.now(), // add a unique ID\n        },\n      ]);\n    };\n\n    socket.on(\"Reply\", handleReply);\n\n    return () => {\n      socket.off(\"Reply\", handleReply);\n    };\n  }, [socket]);\n\n  useEffect(() => {\n    if (chatMessage) {\n      setMessages(chatMessage);\n    }\n  }, [chatMessage]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSendMessage = () => {\n    if (newMessage.trim() === \"\") return;\n    const userMessage = {\n      task_id: record.task_id,\n      receiver_id:\n        record.assigned_to === userID ? record.assigned_by : record.assigned_to,\n      sender_id: userID,\n      message: newMessage,\n    };\n\n    dispatch(postChat({ ...userMessage }));\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\n\n    setNewMessage(\"\");\n  };\n\n  return (\n    <div className=\"flex flex-col h-80 max-w-lg mx-auto bg-white rounded-lg overflow-hidden\">\n      <header className=\"p-4 bg-green-600 text-white text-lg font-semibold flex items-center shadow-md\">\n        <div className=\"flex items-center\">\n          <img\n            src={profile}\n            alt=\"Profile\"\n            className=\"w-12 h-12 rounded-full mr-2\"\n          />\n          <div>\n            <span>\n              {record.assigned_to === userID\n                ? `${record[\"AssignedBy.name\"]}`\n                : `${record[\"AssignedTo.name\"]}`}\n            </span>\n            <br />\n            <span className=\"text-sm\">{userStatus}</span>\n          </div>\n        </div>\n      </header>\n\n      <main\n        ref={messagesEndRef}\n        className=\"flex-1 overflow-y-auto p-4 h-full bg-cover bg-center\"\n        style={{\n          backgroundImage: `url(${Wallpaper})`,\n        }}\n      >\n        {messages.map((message) => {\n          return (\n            <>\n              <div\n                key={message.id}\n                className={`flex mb-4 ${\n                  message.sender_id === userID ? \"justify-end\" : \"justify-start\"\n                }`}\n              >\n                <div\n                  className={`max-w-xs p-3 rounded-lg text-white ${\n                    message.sender_id === userID\n                      ? \"bg-green-500 text-right\"\n                      : \"bg-green-500 text-black\"\n                  } transition duration-200 ease-in-out shadow-md ${\n                    message.sender_id === userID\n                      ? \"round-l text-left\"\n                      : \"round-r text-left\"\n                  }`}\n                  style={{\n                    wordWrap: \"break-word\",\n                    wordBreak: \"break-word\",\n                    overflowWrap: \"break-word\",\n                    whiteSpace: \"pre-wrap\",\n                  }}\n                >\n                  {message.message}\n                </div>\n              </div>\n            </>\n          );\n        })}\n      </main>\n\n      <footer className=\"p-4 w-full bg-gray-100 border-t shadow-md flex justify-between gap-2\">\n        <div className=\"w-95 border border-gray-300 rounded-lg overflow-hidden focus:outline-none focus:ring-2 focus:ring-green-500 transition duration-200\">\n          <input\n            type=\"text\"\n            value={newMessage}\n            onChange={(e) => setNewMessage(e.target.value)}\n            placeholder=\"Type your message...\"\n            className=\"w-full h-full p-4 focus-outline-none\"\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleSendMessage();\n              }\n            }}\n          />\n        </div>\n        <div className=\"flex justify-center text-xl rounded-full bg-green-600 text-white w-12 h-12 hover:bg-green-700 transition duration-200\">\n          <button onClick={handleSendMessage} className=\"\">\n            <IoMdSend />\n          </button>\n        </div>\n      </footer>\n    </div>\n  );\n};\n\nexport default ChatPage;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst stateSlice = createSlice({\n  name: \"chat/state\",\n  initialState: {\n    selectedChat: {},\n  },\n  reducers: {\n    setSelectedChat: (state, action) => {\n      state.selectedChat = action.payload;\n    },\n  },\n});\n\nexport const { setSelectedChat } = stateSlice.actions;\n\nexport default stateSlice.reducer;\n","import { combineReducers } from \"@reduxjs/toolkit\";\nimport data from \"./dataSlice\";\nimport state from \"./stateSlice\";\nconst chatReducer = combineReducers({\n  data,\n  state,\n});\n\nexport default chatReducer;\n","import { Card } from \"../../../../components/ui\";\nimport ChatPage from \"./components/Message\";\nimport { injectReducer } from \"../../../../store\";\nimport chatReducer from \"./store\";\n\ninjectReducer(\"chat\", chatReducer);\n\nconst TaskChat = () => {\n  return (\n    <div>\n      <ChatPage />\n    </div>\n  );\n};\n\nexport default TaskChat;\n","import ApiService from \"../../ApiService\";\n\nexport async function apiGetAllTaskList(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/task\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiPostTaskList(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/task/register\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiGetUserList() {\n  return ApiService.fetchData({\n    url: \"v1/web/company/user/option\",\n    method: \"post\",\n  });\n}\nexport async function apiPutTaskList(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/task/update/id\",\n    method: \"put\",\n    data,\n  });\n}\n\nexport async function apiDeleteTaskList(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/task/delete/id\",\n    method: \"delete\",\n    data,\n  });\n}\n\nexport async function apiGetChatByTaskId(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/task/chat\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiPostChat(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/task/chat/register\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiGetUserStatus(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/task//user/status\",\n    method: \"post\",\n    data,\n  });\n}\n"],"names":["getChatByTaskId","createAsyncThunk","async","apiGetChatByTaskId","data","error","response","getUserStatus","apiGetUserStatus","postChat","apiPostChat","dataSlice","createSlice","name","initialState","loading","chatByIdList","userStatus","tableData","total","pageIndex","pageSize","query","reducers","setTableData","state","action","payload","extraReducers","fulfilled","_action$payload$data","pending","setFilterData","actions","ChatPage","_location$state","dispatch","useDispatch","location","useLocation","messages","setMessages","useState","newMessage","setNewMessage","userID","useSelector","auth","user","user_id","chatMessage","chat","userSatus","socket","instance","record","messagesEndRef","useRef","useEffect","task_id","assigned_to","handleReply","message","_message$data","console","log","newMsg","dataValues","prevMessages","receiver_id","sender_id","id","task__chat_id","Date","now","on","off","current","scrollTop","scrollHeight","handleSendMessage","trim","userMessage","assigned_by","_jsxs","className","children","_jsx","src","profile","alt","ref","style","backgroundImage","Wallpaper","map","_Fragment","wordWrap","wordBreak","overflowWrap","whiteSpace","type","value","onChange","e","target","placeholder","onKeyDown","key","onClick","IoMdSend","stateSlice","selectedChat","setSelectedChat","combineReducers","injectReducer","chatReducer","TaskChat","apiGetAllTaskList","ApiService","fetchData","url","method","apiPostTaskList","apiGetUserList","apiPutTaskList","apiDeleteTaskList"],"sourceRoot":""}