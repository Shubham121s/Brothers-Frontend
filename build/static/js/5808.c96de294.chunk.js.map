{"version":3,"file":"static/js/5808.c96de294.chunk.js","mappings":"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","sources":["services/SuperAdmin/Task/TaskService.js","view/SuperAdmin/Task/TaskTable/store/dataSlice.js","view/SuperAdmin/Task/TaskTable/store/stateSlice.js","view/SuperAdmin/Task/TaskTable/components/DeleteConfirm.js","view/SuperAdmin/Task/TaskTable/components/TaskTable.js","view/SuperAdmin/Task/TaskTable/store/index.js","view/SuperAdmin/Task/TaskForm/store/stateSlice.js","view/SuperAdmin/Task/TaskForm/store/dataSlice.js","view/SuperAdmin/Task/TaskForm/store/index.js","view/SuperAdmin/Task/TaskForm/components/TaskForm.js","view/SuperAdmin/Task/TaskForm/index.js","view/SuperAdmin/Task/TaskTable/components/DescriptionModal.js","view/SuperAdmin/Task/EditForm/index.js","view/SuperAdmin/Task/TaskTable/index.js","components/shared/loaders/TableRowSkeleton.js","components/shared/DataTable.js"],"sourcesContent":["import ApiService from \"../../ApiService\";\n\nexport async function apiGetAllTaskList(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/task\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiPostTaskList(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/task/register\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiGetUserList() {\n  return ApiService.fetchData({\n    url: \"v1/web/company/user/option\",\n    method: \"post\",\n  });\n}\nexport async function apiPutTaskList(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/task/update/id\",\n    method: \"put\",\n    data,\n  });\n}\n\nexport async function apiDeleteTaskList(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/task/delete/id\",\n    method: \"delete\",\n    data,\n  });\n}\n\nexport async function apiGetChatByTaskId(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/task/chat\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiPostChat(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/task/chat/register\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiGetUserStatus(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/task//user/status\",\n    method: \"post\",\n    data,\n  });\n}\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nimport {\n  apiGetAllTaskList,\n  apiPostTaskList,\n  apiPutTaskList,\n  apiDeleteTaskList,\n} from \"../../../../../services/SuperAdmin/Task/TaskService\";\n\nexport const getAllTask = createAsyncThunk(\n  \"task/data/all/task\",\n  async (data) => {\n    try {\n      const response = await apiGetAllTaskList(data);\n      return response;\n    } catch (error) {\n      return error?.response;\n    }\n  }\n);\n\nexport const postTask = createAsyncThunk(\"task/data/post\", async (data) => {\n  try {\n    const response = await apiPostTaskList(data);\n    return response;\n  } catch (error) {\n    return error?.response;\n  }\n});\n\nexport const putTask = createAsyncThunk(\"task/data/put\", async (data) => {\n  try {\n    const response = await apiPutTaskList(data);\n    return response;\n  } catch (error) {\n    return error?.response;\n  }\n});\n\nexport const deleteTask = createAsyncThunk(\"task/data/delete\", async (data) => {\n  try {\n    const response = await apiDeleteTaskList(data);\n    return response;\n  } catch (error) {\n    return error?.response;\n  }\n});\n\nexport const initialTableData = {\n  total: 0,\n  pageIndex: 1,\n  pageSize: 10,\n  query: \"\",\n};\n\nconst dataSlice = createSlice({\n  name: \"task/data\",\n  initialState: {\n    loading: false,\n    taskList: [],\n    tableData: initialTableData,\n  },\n  reducers: {\n    setTableData: (state, action) => {\n      state.tableData = action.payload;\n    },\n  },\n  extraReducers: {\n    [getAllTask.fulfilled]: (state, action) => {\n      state.taskList = action.payload.data?.data || [];\n      state.tableData.total = action.payload.data.total || 0;\n      state.loading = false;\n    },\n    [getAllTask.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [postTask.fulfilled]: (state, action) => {},\n    [putTask.fulfilled]: (state, action) => {},\n    [deleteTask.fulfilled]: (state, action) => {},\n  },\n});\n\nexport const { setTableData, setFilterData } = dataSlice.actions;\n\nexport default dataSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst stateSlice = createSlice({\n  name: \"task/state\",\n  initialState: {\n    newTaskDialog: false,\n    deleteTaskDialog: false,\n    editTaskDialog: false,\n    selectedTask: {},\n    selectedChat: {},\n    newEyeDialog: false,\n  },\n  reducers: {\n    toggleNewTaskDialog: (state, action) => {\n      state.newTaskDialog = action.payload;\n    },\n    toggleDeleteTaskDialog: (state, action) => {\n      state.deleteTaskDialog = action.payload;\n    },\n    toggleEditTaskDialog: (state, action) => {\n      console.log(\"action.payload\", action.payload);\n      state.editTaskDialog = action.payload;\n    },\n    setSelectedTask: (state, action) => {\n      state.selectedTask = action.payload;\n    },\n    setSelectedChat: (state, action) => {\n      console.log(\"action.payload\", action.payload);\n      state.selectedChat = action.payload;\n    },\n\n    toggleEyeDialog: (state, action) => {\n      state.newEyeDialog = action.payload;\n    },\n  },\n});\n\nexport const {\n  toggleNewTaskDialog,\n  setSelectedTask,\n  setSelectedChat,\n  toggleEditTaskDialog,\n  toggleDeleteTaskDialog,\n  toggleEyeDialog,\n} = stateSlice.actions;\nexport default stateSlice.reducer;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toggleDeleteTaskDialog } from \"../store/stateSlice\";\nimport { deleteTask } from \"../store/dataSlice\";\nimport { Notification, Toast } from \"../../../../../components/ui\";\nimport { ConfirmDialog } from \"../../../../../components/shared\";\n\nconst pushNotification = (title, type, message) => {\n  return Toast.push(\n    <Notification title={title} type={type} duration={2500}>\n      {message}\n    </Notification>,\n    {\n      placement: \"top-center\",\n    }\n  );\n};\n\nconst DeleteConfirm = ({ fetchData }) => {\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  const selectedTask = useSelector((state) => state.task.state.selectedTask);\n  const deleteTaskDialog = useSelector(\n    (state) => state.task.state.deleteTaskDialog\n  );\n\n  const onDialogClose = () => {\n    dispatch(toggleDeleteTaskDialog(false));\n  };\n\n  const onDelete = async () => {\n    setLoading(true);\n    const action = await dispatch(\n      deleteTask({\n        task_id: selectedTask?.task_id,\n      })\n    );\n    setLoading(false);\n    if (action.payload?.status === 200) {\n      pushNotification(\n        \"Successfully Deleted\",\n        \"success\",\n        action.payload?.data?.message\n      );\n      fetchData?.();\n      return onDialogClose();\n    } else {\n      return pushNotification(\n        \"Unsuccessfully\",\n        \"danger\",\n        action.payload?.data?.message\n      );\n    }\n  };\n\n  return (\n    <ConfirmDialog\n      isOpen={deleteTaskDialog}\n      onClose={onDialogClose}\n      onRequestClose={onDialogClose}\n      type=\"danger\"\n      title=\"Delete Task\"\n      onCancel={onDialogClose}\n      onConfirm={onDelete}\n      confirmText={!loading ? \"Confirm\" : \"Deleting...\"}\n      confirmButtonColor=\"red-600\"\n    >\n      <p>\n        Are you sure you want to delete this Product? This action cannot be\n        undone.\n      </p>\n    </ConfirmDialog>\n  );\n};\n\nexport default DeleteConfirm;\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport DataTable from \"../../../../../components/shared/DataTable\";\nimport { MdOutlineMessage } from \"react-icons/md\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAllTask, setTableData } from \"../store/dataSlice\";\nimport { useNavigate } from \"react-router-dom\";\nimport useThemeClass from \"../../../../../utils/hooks/useThemeClass\";\nimport { HiEye, HiOutlinePencil, HiOutlineTrash } from \"react-icons/hi\";\nimport {\n  setSelectedChat,\n  setSelectedTask,\n  toggleDeleteTaskDialog,\n  toggleEditTaskDialog,\n  toggleEyeDialog,\n  toggleNewTaskDialog,\n} from \"../store/stateSlice\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport { Badge, Tag } from \"../../../../../components/ui\";\nimport DeleteConfirm from \"./DeleteConfirm\";\n\nconst ActionColumn = ({ row }) => {\n  const { textTheme } = useThemeClass();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const onEdit = () => {\n    dispatch(setSelectedTask(row));\n    dispatch(toggleEditTaskDialog(true));\n  };\n\n  const onDelete = () => {\n    console.log(\"click\");\n    dispatch(setSelectedTask(row));\n    dispatch(toggleDeleteTaskDialog(true));\n  };\n\n  const onEye = () => {\n    dispatch(setSelectedTask(row));\n    dispatch(toggleEyeDialog(true));\n  };\n\n  return (\n    <div className=\"flex justify-between text-lg\">\n      <span className={`cursor-pointer hover:${textTheme}`} onClick={onEdit}>\n        <HiOutlinePencil />\n      </span>\n      <span className={`cursor-pointer hover:${textTheme}`} onClick={onDelete}>\n        <HiOutlineTrash />\n      </span>\n      <span className={`cursor-pointer hover:${textTheme}`} onClick={onEye}>\n        <HiEye />\n      </span>\n    </div>\n  );\n};\n\nconst TaskTable = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const data = useSelector((state) => state.task.data.taskList);\n  const loading = useSelector((state) => state.task.data.loading);\n\n  const { pageIndex, pageSize, query, total } = useSelector(\n    (state) => state.task.data.tableData\n  );\n\n  const fetchData = useCallback(() => {\n    dispatch(getAllTask({ pageIndex, pageSize, query }));\n  }, [pageIndex, pageSize, query, dispatch]);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData, pageIndex, pageSize]);\n\n  const tableData = useMemo(\n    () => ({ pageIndex, pageSize, query, total }),\n    [pageIndex, pageSize, query, total]\n  );\n\n  const onReply = (row) => {\n    console.log(\"row\", row);\n    navigate(\"/task/chat\", { state: { record: row } });\n  };\n\n  const priorityColor = {\n    high: {\n      label: \"High\",\n      bgClass: \"bg-red-100\",\n      textClass: \"text-red-600\",\n    },\n    low: {\n      label: \"Low\",\n      bgClass: \"bg-orange-100\",\n      textClass: \"text-orange-600\",\n    },\n    medium: {\n      label: \"Medium\",\n      bgClass: \"bg-emerald-100\",\n      textClass: \"text-emerald-600\",\n    },\n  };\n\n  const statusColor = {\n    active: {\n      label: \"Active\",\n      dotClass: \"bg-emerald-500\",\n      textClass: \"text-emerald-500\",\n    },\n    inactive: {\n      label: \"In-Active\",\n      dotClass: \"bg-red-500\",\n      textClass: \"text-red-500\",\n    },\n  };\n\n  const columns = [\n    {\n      header: \"Assigned By\",\n      accessorKey: \"AssignedBy.name\",\n      cell: (props) => {\n        const row = props.row.original;\n        return <div>{row[\"AssignedBy.name\"]}</div>;\n      },\n    },\n\n    {\n      header: \"Description\",\n      accessorKey: \"description\",\n      cell: (props) => {\n        const row = props.row.original;\n        return <div>{row?.description}</div>;\n      },\n    },\n    {\n      header: \"Task\",\n      accessorKey: \"task\",\n      cell: (props) => {\n        const row = props.row.original;\n        return <div>{row.task}</div>;\n      },\n    },\n    {\n      header: \"Assigned To\",\n      accessorKey: \"AssignedTo.name\",\n      cell: (props) => {\n        const row = props.row.original;\n        return <div>{row[\"AssignedTo.name\"]}</div>;\n      },\n    },\n    {\n      header: \"Priority\",\n      accessorKey: \"priority\",\n      cell: (props) => {\n        const row = props.row?.original;\n        const priority = row?.priority;\n\n        return (\n          <div>\n            <Tag\n              className={`${priorityColor[priority]?.bgClass} ${priorityColor[priority]?.textClass} border-0`}\n            >\n              {priorityColor[priority]?.label || priority}\n            </Tag>\n          </div>\n        );\n      },\n    },\n    {\n      header: \"Status\",\n      accessorKey: \"status\",\n      cell: (props) => {\n        const row = props.row.original;\n        return (\n          <div className=\"flex items-center\">\n            <Badge className={statusColor[row?.status]?.dotClass} />\n            <span\n              className={`ml-2 font-semibold capitalize ${\n                statusColor[row?.status]?.textClass\n              }`}\n            >\n              {statusColor[row?.status]?.label}\n            </span>\n          </div>\n        );\n      },\n    },\n    {\n      header: \"Reply\",\n      accessorKey: \"reply\",\n      cell: (props) => {\n        const row = props.row.original;\n        return (\n          <button\n            onClick={() => onReply(row)}\n            className=\"text-blue-500 hover:text-blue-700\"\n          >\n            <MdOutlineMessage size={25} />\n          </button>\n        );\n      },\n    },\n    {\n      header: \"\",\n      id: \"action\",\n      cell: (props) => {\n        const row = props.row.original;\n        return <ActionColumn row={row} />;\n      },\n    },\n  ];\n\n  const onPaginationChange = (page) => {\n    const newTableData = cloneDeep(tableData);\n    newTableData.pageIndex = page;\n    dispatch(setTableData(newTableData));\n  };\n\n  const onSelectChange = (value) => {\n    const newTableData = cloneDeep(tableData);\n    newTableData.pageSize = Number(value);\n    newTableData.pageIndex = 1;\n    dispatch(setTableData(newTableData));\n  };\n\n  return (\n    <div>\n      <DataTable\n        columns={columns}\n        data={data}\n        loading={loading}\n        pagingData={{ pageIndex, pageSize, query, total }}\n        onPaginationChange={onPaginationChange}\n        onSelectChange={onSelectChange}\n      />\n      <DeleteConfirm fetchData={fetchData} />\n    </div>\n  );\n};\n\nexport default TaskTable;\n","import { combineReducers } from \"@reduxjs/toolkit\";\nimport data from \"./dataSlice\";\nimport state from \"./stateSlice\";\nconst taskReducer = combineReducers({\n  data,\n  state,\n});\n\nexport default taskReducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst stateSlice = createSlice({\n  name: \"product/setting/pattern/state\",\n  initialState: {\n    newTaskDialog: false,\n    deleteTaskDialog: false,\n    editTaskDialog: false,\n    selectedTask: {},\n  },\n  reducers: {\n    toggleNewTaskDialog: (state, action) => {\n      state.newTaskDialog = action.payload;\n    },\n    toggleDeleteTaskDialog: (state, action) => {\n      state.deleteTaskDialog = action.payload;\n    },\n    toggleEditTaskDialog: (state, action) => {\n      state.editTaskDialog = action.payload;\n    },\n    setSelectedTask: (state, action) => {\n      state.selectedTask = action.payload;\n    },\n  },\n});\n\nexport const {\n  toggleNewTaskDialog,\n  setSelectedTask,\n  toggleEditTaskDialog,\n  toggleDeleteTaskDialog,\n} = stateSlice.actions;\n\nexport default stateSlice.reducer;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nimport {\n  apiPostTaskList,\n  apiGetUserList,\n  apiGetAllTaskList,\n  apiPutTaskList,\n} from \"../../../../../services/SuperAdmin/Task/TaskService\";\n\nexport const postTask = createAsyncThunk(\"task/data/post\", async (data) => {\n  try {\n    const response = await apiPostTaskList(data);\n    return response;\n  } catch (error) {\n    return error?.response;\n  }\n});\n\nexport const putTask = createAsyncThunk(\"task/data/put\", async (data) => {\n  try {\n    const response = await apiPutTaskList(data);\n    return response;\n  } catch (error) {\n    return error?.response;\n  }\n});\n\nexport const getAllTask = createAsyncThunk(\n  \"task/data/all/task\",\n  async (data) => {\n    try {\n      const response = await apiGetAllTaskList(data);\n      return response;\n    } catch (error) {\n      return error?.response;\n    }\n  }\n);\n\nexport const getUser = createAsyncThunk(\"task/data/get/user\", async (data) => {\n  try {\n    const response = await apiGetUserList(data);\n    return response;\n  } catch (error) {\n    return error?.response;\n  }\n});\n\nexport const initialTableData = {\n  total: 0,\n  pageIndex: 1,\n  pageSize: 10,\n  query: \"\",\n};\n\nconst dataSlice = createSlice({\n  name: \"task/data\",\n  initialState: {\n    loading: false,\n    userList: [],\n    taskList: [],\n    tableData: initialTableData,\n  },\n  reducers: {\n    setTableData: (state, action) => {\n      state.tableData = action.payload;\n    },\n  },\n  extraReducers: {\n    [getUser.fulfilled]: (state, action) => {\n      state.userList = action.payload.data?.data || [];\n      state.tableData.total = action.payload.data.total || 0;\n      state.loading = false;\n    },\n    [getUser.pending]: (state, action) => {\n      state.loading = true;\n    },\n\n    [getAllTask.fulfilled]: (state, action) => {\n      state.taskList = action.payload.data?.data || [];\n      state.tableData.total = action.payload.data.total || 0;\n      state.loading = false;\n    },\n    [getAllTask.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [postTask.fulfilled]: (state, action) => {},\n    [putTask.fulfilled]: (state, action) => {},\n  },\n});\n\nexport const { setTableData, setFilterData } = dataSlice.actions;\n\nexport default dataSlice.reducer;\n","import { combineReducers } from \"@reduxjs/toolkit\";\nimport data from \"./dataSlice\";\nimport state from \"./stateSlice\";\nconst taskFormReducer = combineReducers({\n  data,\n  state,\n});\n\nexport default taskFormReducer;\n","import React, { forwardRef, useEffect } from \"react\";\nimport {\n  FormContainer,\n  Button,\n  FormItem,\n  Input,\n  Select,\n  DatePicker,\n} from \"../../../../../components/ui\";\nimport { Field, Form, Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getUser } from \"../store/dataSlice\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport { AiOutlineSave } from \"react-icons/ai\";\n\nconst validationSchema = Yup.object().shape({\n  task: Yup.string().required(\"Task Required\"),\n  priority: Yup.string().required(\"Choose Priority\"),\n  description: Yup.string().required(\"Description Required\"),\n  assigned_to: Yup.string().required(\"Choose a User\"),\n  date: Yup.string().required(\"Date Required\"),\n});\n\nconst priorityOptions = [\n  { label: \"High\", value: \"high\" },\n  { label: \"Medium\", value: \"medium\" },\n  { label: \"Low\", value: \"low\" },\n];\n\nconst TaskFormDialog = forwardRef((props, ref) => {\n  const { type, initialData, onFormSubmit, onDiscard } = props;\n  console.log(\"initialData\", initialData);\n  const dispatch = useDispatch();\n  const userList = useSelector((state) => state.taskForm.data.userList);\n\n  //   const userID = useSelector((state) => state.auth.user.user_id);\n\n  console.log(\"userList\", userList);\n  useEffect(() => {\n    const fetchData = async () => {\n      dispatch(getUser());\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <>\n      <Formik\n        innerRef={ref}\n        initialValues={{\n          ...initialData,\n        }}\n        validationSchema={validationSchema}\n        onSubmit={(values, { setSubmitting }) => {\n          const formData = cloneDeep(values);\n          onFormSubmit?.(formData, setSubmitting);\n        }}\n      >\n        {({ values, touched, errors, isSubmitting }) => (\n          <Form>\n            <FormContainer>\n              <div>\n                <h4 className=\"mb-4\">\n                  {type === \"edit\" ? \"Edit Task\" : \"Add Task\"}{\" \"}\n                </h4>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormItem\n                    label=\"Task\"\n                    invalid={errors.task && touched.task}\n                    errorMessage={errors.task}\n                    className=\"mb-2 col-span-2 md:col-span-2\"\n                  >\n                    <Field\n                      type=\"text\"\n                      autoComplete=\"off\"\n                      name=\"task\"\n                      placeholder=\"Task\"\n                      component={Input}\n                    />\n                  </FormItem>\n\n                  <FormItem\n                    label=\"Description\"\n                    invalid={errors.description && touched.description}\n                    errorMessage={errors.description}\n                    className=\"mb-2 col-span-2 md:col-span-2\"\n                  >\n                    <Field\n                      type=\"text\"\n                      autoComplete=\"off\"\n                      name=\"description\"\n                      placeholder=\"Description\"\n                      component={Input}\n                    />\n                  </FormItem>\n                  <FormItem\n                    label=\"Priority\"\n                    invalid={errors.priority && touched.priority}\n                    errorMessage={errors.priority}\n                    className=\"mb-2\"\n                  >\n                    <Field name=\"priority\">\n                      {({ field, form }) => (\n                        <Select\n                          field={field}\n                          form={form}\n                          options={priorityOptions}\n                          value={priorityOptions.filter(\n                            (priority) => priority.value === values.priority\n                          )}\n                          onChange={(option) =>\n                            form.setFieldValue(field.name, option.value)\n                          }\n                        />\n                      )}\n                    </Field>\n                  </FormItem>\n                  <FormItem\n                    label=\"Assigned To\"\n                    invalid={errors.assigned_to && touched.assigned_to}\n                    errorMessage={errors.assigned_to}\n                    className=\"mb-2\"\n                  >\n                    <Field name=\"assigned_to\">\n                      {({ field, form }) => (\n                        <Select\n                          field={field}\n                          form={form}\n                          options={userList}\n                          value={userList?.filter(\n                            (user) => user.value === values.assigned_to\n                          )}\n                          onChange={(option) =>\n                            form.setFieldValue(field.name, option.value)\n                          }\n                        />\n                      )}\n                    </Field>\n                  </FormItem>\n\n                  <FormItem\n                    label=\"Date\"\n                    invalid={errors.date && touched.date}\n                    errorMessage={errors.date}\n                    className=\"mb-2\"\n                  >\n                    <Field name=\"date\" className=\"mb-2\">\n                      {({ field, form }) => (\n                        <DatePicker\n                          field={field}\n                          size=\"md\"\n                          placeholder=\"Date\"\n                          form={form}\n                          value={values.date}\n                          onChange={(date) => {\n                            form.setFieldValue(field.name, date);\n                          }}\n                        />\n                      )}\n                    </Field>\n                  </FormItem>\n                </div>\n              </div>\n              <div className=\"flex gap-4 justify-end mt-3\">\n                <Button\n                  size=\"sm\"\n                  className=\"ltr:mr-3 rtl:ml-3\"\n                  onClick={() => onDiscard?.()}\n                  type=\"button\"\n                >\n                  Discard\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"solid\"\n                  loading={isSubmitting}\n                  icon={<AiOutlineSave className=\"mr-1\" />}\n                  type=\"submit\"\n                >\n                  {type === \"edit\" ? \"Update\" : \"Save\"}\n                </Button>\n              </div>\n            </FormContainer>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n});\n\nTaskFormDialog.defaultProps = {\n  type: \"edit\",\n  initialData: {\n    task: \"\",\n    description: \"\",\n    priority: \"\",\n    assigned_to: \"\",\n    date: \"\",\n  },\n};\nexport default TaskFormDialog;\n","import React from \"react\";\nimport { Card, Dialog, Notification, Toast } from \"../../../../components/ui\";\nimport { injectReducer } from \"../../../../store\";\nimport taskFormReducer from \"./store\";\nimport { toggleNewTaskDialog } from \"./store/stateSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport TaskFormDialog from \"./components/TaskForm\";\nimport { postTask } from \"./store/dataSlice\";\nimport { getAllTask } from \"../TaskTable/store/dataSlice\";\n\ninjectReducer(\"taskForm\", taskFormReducer);\n\nconst TaskForm = () => {\n  const dispatch = useDispatch();\n  const newTaskDialog = useSelector(\n    (state) => state.taskForm.state?.newTaskDialog\n  );\n  const tableData = useSelector((state) => state.taskForm.data.tableData);\n\n  const onDialogClose = () => {\n    dispatch(toggleNewTaskDialog(false));\n  };\n\n  const handleFormSubmit = async (values, setSubmitting) => {\n    setSubmitting(true);\n    const action = await dispatch(postTask(values));\n    console.log(\"action\", action.payload);\n    setSubmitting(false);\n    if (action.payload.status === 200) {\n      dispatch(getAllTask(tableData));\n      Toast.push(\n        <Notification\n          title={\"Successfully added\"}\n          type=\"success\"\n          duration={2500}\n        >\n          Category successfully added\n        </Notification>,\n        {\n          placement: \"top-center\",\n        }\n      );\n      onDialogClose();\n    }\n  };\n\n  return (\n    <Dialog\n      isOpen={newTaskDialog}\n      onClose={onDialogClose}\n      onRequestClose={onDialogClose}\n      className=\"mt-12\"\n    >\n      <TaskFormDialog\n        type=\"new\"\n        onFormSubmit={handleFormSubmit}\n        onDiscard={onDialogClose}\n      />\n    </Dialog>\n  );\n};\n\nexport default TaskForm;\n","import React from \"react\";\nimport { Dialog } from \"../../../../../components/ui\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toggleEyeDialog } from \"../store/stateSlice\";\nimport { MdOutlineMessage } from \"react-icons/md\";\n\nconst DescriptionModal = ({ onDialogClose }) => {\n  const dispatch = useDispatch();\n\n  const selectedTask = useSelector((state) => state.task.state.selectedTask);\n\n  const priorityColor = {\n    high: {\n      label: \"High\",\n      bgClass: \"bg-red-100\",\n      textClass: \"text-red-600\",\n    },\n    low: {\n      label: \"Low\",\n      bgClass: \"bg-orange-100\",\n      textClass: \"text-orange-600\",\n    },\n    medium: {\n      label: \"Medium\",\n      bgClass: \"bg-emerald-100\",\n      textClass: \"text-emerald-600\",\n    },\n  };\n\n  const statusColor = {\n    active: {\n      label: \"Active\",\n      dotClass: \"bg-emerald-500\",\n      textClass: \"text-emerald-500\",\n    },\n    inactive: {\n      label: \"In-Active\",\n      dotClass: \"bg-red-500\",\n      textClass: \"text-red-500\",\n    },\n  };\n\n  const closeModal = () => {\n    dispatch(toggleEyeDialog(false));\n  };\n\n  return (\n    <>\n      <div className=\"p-4 mt-4 bg-white rounded-lg transition-transform transform hover:scale-105\">\n        {selectedTask ? (\n          <div className=\"flex flex-col gap-8\">\n            <div className=\"flex items-center\">\n              <span className=\"font-semibold text-gray-800\">Assigned By:</span>\n              <span className=\"text-gray-600\">\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n              </span>\n              <span className=\"text-gray-600\">\n                {selectedTask[\"AssignedBy.name\"]}\n              </span>\n            </div>\n\n            <div className=\"flex items-center\">\n              <span className=\"font-semibold text-gray-800\">Description</span>\n              <span className=\"text-gray-600 ml-5.5\">\n                {\" \"}\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n              </span>\n              <span className=\"text-gray-600 text-left\">\n                {selectedTask.description}\n              </span>\n            </div>\n\n            <div className=\"flex items-center\">\n              <span className=\"font-semibold text-gray-800\">Task</span>\n              <span className=\"text-gray-600 \">\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                : &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n              </span>\n              <span className=\"text-gray-600\">{selectedTask.task}</span>\n            </div>\n\n            <div className=\"flex items-center\">\n              <span className=\"font-semibold text-gray-800\">Assigned To</span>\n              <span className=\"text-gray-600 \">\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n              </span>\n              <span className=\"text-gray-600 text-left\">\n                {selectedTask[\"AssignedTo.name\"]}\n              </span>\n            </div>\n\n            <div className=\"flex items-center\">\n              <span className=\"font-semibold text-gray-800\">Priority</span>\n              <span className=\"text-gray-600 \">\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                : &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n              </span>\n              <span\n                className={`px-3 py-1 rounded-full text-sm ${\n                  priorityColor[selectedTask.priority]?.bgClass\n                } ${priorityColor[selectedTask.priority]?.textClass}`}\n              >\n                {priorityColor[selectedTask.priority]?.label ||\n                  selectedTask.priority}\n              </span>\n            </div>\n\n            {/* Status */}\n            <div className=\"flex\">\n              <span className=\"font-semibold text-gray-800\">Status</span>\n              <span className=\"text-gray-600\">\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                : &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n              </span>\n              <div className=\"flex items-center\">\n                <span\n                  className={`w-3 h-3 rounded-full ${\n                    statusColor[selectedTask.status]?.dotClass\n                  }`}\n                ></span>\n                <span\n                  className={`ml-2 capitalize font-semibold ${\n                    statusColor[selectedTask.status]?.textClass\n                  }`}\n                >\n                  {statusColor[selectedTask.status]?.label}\n                </span>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end\">\n              <button\n                className=\"flex items-center px-4 py-2 text-white bg-red-500 rounded-lg shadow hover:bg-red-600 transition duration-200 transform hover:scale-105\"\n                onClick={onDialogClose}\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        ) : (\n          <p className=\"text-center text-gray-500\">No task selected.</p>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default DescriptionModal;\n","import React, { useEffect } from \"react\";\nimport { Toast, Notification, Dialog } from \"../../../../components/ui\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAllTask, getUser } from \"../TaskForm/store/dataSlice\";\nimport TaskFormDialog from \"../TaskForm/components/TaskForm\";\nimport { putTask } from \"../TaskForm/store/dataSlice\";\nimport { toggleEditTaskDialog } from \"../TaskTable/store/stateSlice\";\n\nconst popNotification = (keyword, type, message) => {\n  Toast.push(\n    <Notification title={keyword} type={type} duration={2500}>\n      {message}\n    </Notification>,\n    {\n      placement: \"top-center\",\n    }\n  );\n};\n\nconst EditTask = () => {\n  const dispatch = useDispatch();\n  const editTaskDialog = useSelector(\n    (state) => state.task.state?.editTaskDialog\n  );\n\n  const initialData = useSelector((state) => state.taskForm.data.taskList);\n  useEffect(() => {\n    dispatch(getUser());\n  }, []);\n\n  const handleFormSubmit = async (values, setSubmitting) => {\n    setSubmitting(true);\n\n    const response = await dispatch(putTask(values));\n\n    if (response.data?.success) {\n      popNotification(\"Successfull\", \"success\", \"Product Updated Successfully\");\n    } else {\n      popNotification(\"Unsuccessful\", \"danger\", \"Product not created\");\n    }\n  };\n\n  const onDialogClose = () => {\n    console.log(\"onDialogClose\");\n    dispatch(toggleEditTaskDialog(false));\n  };\n\n  return (\n    <>\n      <Dialog\n        isOpen={editTaskDialog}\n        onClose={onDialogClose}\n        onRequestClose={onDialogClose}\n        className=\"mt-12\"\n      >\n        <TaskFormDialog\n          type=\"edit\"\n          onFormSubmit={handleFormSubmit}\n          onDiscard={onDialogClose}\n          initialData={initialData}\n        />\n      </Dialog>\n    </>\n  );\n};\n\nexport default EditTask;\n","import React from \"react\";\nimport TaskTable from \"./components/TaskTable\";\nimport { Button, Card, Dialog } from \"../../../../components/ui\";\nimport { injectReducer } from \"../../../../store\";\nimport taskReducer from \"./store\";\nimport { toggleNewTaskDialog } from \"../TaskForm/store/stateSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport TaskForm from \"../TaskForm\";\nimport { toggleEyeDialog } from \"./store/stateSlice\";\nimport DescriptionModal from \"./components/DescriptionModal\";\nimport EditTask from \"../EditForm\";\n\ninjectReducer(\"task\", taskReducer);\n\nconst Task = () => {\n  const dispatch = useDispatch();\n\n  const onDialogOpen = () => {\n    dispatch(toggleNewTaskDialog(true));\n  };\n\n  const newEyeDialog = useSelector((state) => state.task.state.newEyeDialog);\n\n  const onDialogClose = () => {\n    dispatch(toggleEyeDialog(false));\n  };\n\n  return (\n    <div>\n      <h3 className=\"mb-4\">Task List</h3>\n\n      <div className=\"w-full flex justify-end mb-4\">\n        <Button\n          className=\"bg-blue-600 text-blue-100 hover:bg-blue-700 hover:text-blue-100 active:bg-blue-600 focus:bg-blue-600\"\n          onClick={onDialogOpen}\n        >\n          Add Task\n        </Button>\n      </div>\n\n      <TaskForm />\n\n      <Card>\n        <TaskTable />\n      </Card>\n\n      <Dialog\n        isOpen={newEyeDialog}\n        onClose={onDialogClose}\n        onRequestClose={onDialogClose}\n        className=\"mt-12\"\n      >\n        <DescriptionModal onDialogClose={onDialogClose} />\n      </Dialog>\n\n      <EditTask />\n    </div>\n  );\n};\n\nexport default Task;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Table, Skeleton } from '../../../components/ui'\n\nconst { Tr, Td, TBody } = Table\n\nconst TableRowSkeleton = (props) => {\n    const { columns, rows, avatarInColumns, avatarProps } = props\n\n    return (\n        <TBody>\n            {Array.from(new Array(rows), (_, i) => i + 0).map((row) => (\n                <Tr key={`row-${row}`}>\n                    {Array.from(new Array(columns), (_, i) => i + 0).map(\n                        (col) => (\n                            <Td key={`col-${col}`}>\n                                <div className=\"flex flex-auto items-center gap-2\">\n                                    {avatarInColumns.includes(col) && (\n                                        <div>\n                                            <Skeleton\n                                                variant=\"circle\"\n                                                {...avatarProps}\n                                            />\n                                        </div>\n                                    )}\n                                    <Skeleton />\n                                </div>\n                            </Td>\n                        )\n                    )}\n                </Tr>\n            ))}\n        </TBody>\n    )\n}\n\nTableRowSkeleton.propTypes = {\n    columns: PropTypes.number,\n    rows: PropTypes.number,\n    avatarInColumns: PropTypes.arrayOf(PropTypes.number),\n}\n\nTableRowSkeleton.defaultProps = {\n    columns: 1,\n    rows: 10,\n    avatarInColumns: [],\n}\n\nexport default TableRowSkeleton\n","import React, {\n  forwardRef,\n  useMemo,\n  useRef,\n  useEffect,\n  useState,\n  useImperativeHandle,\n} from \"react\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport {\n  Table,\n  Pagination,\n  Select,\n  Checkbox,\n  Alert,\n} from \"../../components/ui\";\nimport TableRowSkeleton from \"./loaders/TableRowSkeleton\";\nimport Loading from \"./Loading\";\nimport {\n  useReactTable,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  flexRender,\n} from \"@tanstack/react-table\";\n\nconst { Tr, Th, Td, THead, TBody } = Table;\n\nconst IndeterminateCheckbox = (props) => {\n  const {\n    indeterminate,\n    onChange,\n    onCheckBoxChange,\n    onIndeterminateCheckBoxChange,\n    ...rest\n  } = props;\n\n  const ref = useRef(null);\n\n  useEffect(() => {\n    if (typeof indeterminate === \"boolean\") {\n      ref.current.indeterminate = !rest.checked && indeterminate;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref, indeterminate]);\n\n  const handleChange = (e) => {\n    onChange(e);\n    onCheckBoxChange?.(e);\n    onIndeterminateCheckBoxChange?.(e);\n  };\n\n  return (\n    <Checkbox\n      className=\"mb-0\"\n      ref={ref}\n      onChange={(_, e) => handleChange(e)}\n      {...rest}\n    />\n  );\n};\n\nconst DataTable = forwardRef((props, ref) => {\n  const {\n    skeletonAvatarColumns,\n    columns: columnsProp,\n    data,\n    loading,\n    onCheckBoxChange,\n    onIndeterminateCheckBoxChange,\n    onPaginationChange,\n    onSelectChange,\n    onSort,\n    pageSizes,\n    selectable,\n    skeletonAvatarProps,\n    pagingData,\n    tableWidth = \"100%\",\n  } = props;\n\n  const { pageSize, pageIndex, total } = pagingData;\n\n  const [sorting, setSorting] = useState(null);\n\n  const pageSizeOption = useMemo(\n    () =>\n      pageSizes.map((number) => ({\n        value: number,\n        label: `${number} / page`,\n      })),\n    [pageSizes]\n  );\n\n  const handleCheckBoxChange = (checked, row) => {\n    if (!loading) {\n      onCheckBoxChange?.(checked, row);\n    }\n  };\n\n  const handleIndeterminateCheckBoxChange = (checked, rows) => {\n    if (!loading) {\n      onIndeterminateCheckBoxChange?.(checked, rows);\n    }\n  };\n\n  const handlePaginationChange = (page) => {\n    if (!loading) {\n      onPaginationChange?.(page);\n    }\n  };\n\n  const handleSelectChange = (value) => {\n    if (!loading) {\n      onSelectChange?.(Number(value));\n    }\n  };\n\n  useEffect(() => {\n    if (Array.isArray(sorting)) {\n      const sortOrder =\n        sorting.length > 0 ? (sorting[0].desc ? \"desc\" : \"asc\") : \"\";\n      const id = sorting.length > 0 ? sorting[0].id : \"\";\n      onSort?.({ order: sortOrder, key: id });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sorting]);\n\n  const hasOldColumnMetaKey = columnsProp.some(\n    (col) => col.Header || col.accessor || col.Cell\n  );\n\n  const finalColumns = useMemo(() => {\n    const columns = columnsProp.map((col) => ({\n      ...col,\n      size: col.size || undefined,\n      minSize: col.minSize || 100,\n      maxSize: col.maxSize || 300,\n    }));\n\n    if (selectable) {\n      return [\n        {\n          id: \"select\",\n          header: ({ table }) => (\n            <IndeterminateCheckbox\n              checked={table.getIsAllRowsSelected()}\n              indeterminate={table.getIsSomeRowsSelected()}\n              onChange={table.getToggleAllRowsSelectedHandler()}\n              onIndeterminateCheckBoxChange={(e) => {\n                handleIndeterminateCheckBoxChange(\n                  e.target.checked,\n                  table.getRowModel().rows\n                );\n              }}\n            />\n          ),\n          cell: ({ row }) => (\n            <IndeterminateCheckbox\n              checked={row.getIsSelected()}\n              disabled={!row.getCanSelect()}\n              indeterminate={row.getIsSomeSelected()}\n              onChange={row.getToggleSelectedHandler()}\n              onCheckBoxChange={(e) =>\n                handleCheckBoxChange(e.target.checked, row.original)\n              }\n            />\n          ),\n          size: 50,\n          minSize: 50,\n          maxSize: 50,\n        },\n        ...columns,\n      ];\n    }\n    return columns;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [columnsProp, selectable]);\n\n  const table = useReactTable({\n    data,\n    columns: hasOldColumnMetaKey ? [] : finalColumns,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    manualPagination: true,\n    manualSorting: true,\n    onSortingChange: setSorting,\n    state: {\n      sorting,\n    },\n    columnResizeMode: \"onChange\",\n  });\n\n  const resetSorting = () => {\n    table.resetSorting();\n  };\n\n  const resetSelected = () => {\n    table.toggleAllRowsSelected(false);\n  };\n\n  useImperativeHandle(ref, () => ({\n    resetSorting,\n    resetSelected,\n  }));\n\n  if (hasOldColumnMetaKey) {\n    const message =\n      \"You are using old react-table v7 column config, please use v8 column config instead, refer to our demo or https://tanstack.com/table/v8\";\n\n    if (process.env.NODE_ENV === \"development\") {\n      console.warn(message);\n    }\n\n    return <Alert>{message}</Alert>;\n  }\n\n  return (\n    <Loading loading={loading && data.length !== 0} type=\"cover\">\n      <div style={{ width: tableWidth, overflowX: \"auto\" }}>\n        <Table style={{ width: \"100%\", tableLayout: \"fixed\" }}>\n          <THead>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <Tr key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <Th\n                      key={header.id}\n                      colSpan={header.colSpan}\n                      style={{ width: `${header.column.getSize()}px` }}\n                    >\n                      {header.isPlaceholder ? null : (\n                        <div\n                          className={classNames(\n                            // header.column.getCanSort() && 'cursor-pointer select-none point',\n                            loading && \"pointer-events-none\"\n                          )}\n                          // onClick={header.column.getToggleSortingHandler()}\n                        >\n                          {flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                          {/* {header.column.getCanSort() && <Sorter sort={header.column.getIsSorted()} />} */}\n                        </div>\n                      )}\n                    </Th>\n                  );\n                })}\n              </Tr>\n            ))}\n          </THead>\n          {loading && data.length === 0 ? (\n            <TableRowSkeleton\n              columns={finalColumns.length}\n              rows={pagingData.pageSize}\n              avatarInColumns={skeletonAvatarColumns}\n              avatarProps={skeletonAvatarProps}\n            />\n          ) : (\n            <TBody>\n              {table\n                .getRowModel()\n                .rows.slice(0, pageSize)\n                .map((row) => {\n                  return (\n                    <Tr key={row.id}>\n                      {row.getVisibleCells().map((cell) => {\n                        return (\n                          <Td\n                            key={cell.id}\n                            style={{ width: `${cell.column.getSize()}px` }}\n                          >\n                            {flexRender(\n                              cell.column.columnDef.cell,\n                              cell.getContext()\n                            )}\n                          </Td>\n                        );\n                      })}\n                    </Tr>\n                  );\n                })}\n            </TBody>\n          )}\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-between mt-4\">\n        <Pagination\n          pageSize={pageSize}\n          currentPage={pageIndex}\n          total={total}\n          onChange={handlePaginationChange}\n        />\n        <div style={{ minWidth: 130 }}>\n          <Select\n            size=\"sm\"\n            menuPlacement=\"top\"\n            isSearchable={false}\n            value={pageSizeOption.filter((option) => option.value === pageSize)}\n            options={pageSizeOption}\n            onChange={(option) => handleSelectChange(option.value)}\n          />\n        </div>\n      </div>\n    </Loading>\n  );\n});\n\nDataTable.propTypes = {\n  columns: PropTypes.array,\n  data: PropTypes.array,\n  loading: PropTypes.bool,\n  onCheckBoxChange: PropTypes.func,\n  onIndeterminateCheckBoxChange: PropTypes.func,\n  onPaginationChange: PropTypes.func,\n  onSelectChange: PropTypes.func,\n  onSort: PropTypes.func,\n  pageSizes: PropTypes.arrayOf(PropTypes.number),\n  selectable: PropTypes.bool,\n  skeletonAvatarColumns: PropTypes.arrayOf(PropTypes.number),\n  skeletonAvatarProps: PropTypes.object,\n  pagingData: PropTypes.shape({\n    total: PropTypes.number,\n    pageIndex: PropTypes.number,\n    pageSize: PropTypes.number,\n  }),\n};\n\nDataTable.defaultProps = {\n  pageSizes: [10, 25, 50, 100],\n  pagingData: {\n    total: 0,\n    pageIndex: 1,\n    pageSize: 10,\n  },\n  data: [],\n  columns: [],\n  selectable: false,\n  loading: false,\n};\n\nexport default DataTable;\n"],"names":["async","apiGetAllTaskList","data","ApiService","fetchData","url","method","apiPostTaskList","apiGetUserList","apiPutTaskList","apiDeleteTaskList","apiGetChatByTaskId","apiPostChat","apiGetUserStatus","getAllTask","createAsyncThunk","error","response","postTask","putTask","deleteTask","dataSlice","createSlice","name","initialState","loading","taskList","tableData","total","pageIndex","pageSize","query","reducers","setTableData","state","action","payload","extraReducers","fulfilled","_action$payload$data","pending","setFilterData","actions","stateSlice","newTaskDialog","deleteTaskDialog","editTaskDialog","selectedTask","selectedChat","newEyeDialog","toggleNewTaskDialog","toggleDeleteTaskDialog","toggleEditTaskDialog","console","log","setSelectedTask","setSelectedChat","toggleEyeDialog","pushNotification","title","type","message","Toast","push","_jsx","Notification","duration","children","placement","_ref","setLoading","useState","dispatch","useDispatch","useSelector","task","onDialogClose","ConfirmDialog","isOpen","onClose","onRequestClose","onCancel","onConfirm","_action$payload","task_id","_action$payload2","_action$payload2$data","_action$payload3","_action$payload3$data","status","confirmText","confirmButtonColor","ActionColumn","row","textTheme","useThemeClass","useNavigate","_jsxs","className","onClick","onEdit","HiOutlinePencil","onDelete","HiOutlineTrash","onEye","HiEye","TaskTable","navigate","useCallback","useEffect","useMemo","priorityColor","high","label","bgClass","textClass","low","medium","statusColor","active","dotClass","inactive","columns","header","accessorKey","cell","props","original","description","_props$row","_priorityColor$priori","_priorityColor$priori2","_priorityColor$priori3","priority","Tag","_statusColor$row$stat","_statusColor$row$stat2","_statusColor$row$stat3","Badge","record","onReply","MdOutlineMessage","size","id","DataTable","pagingData","onPaginationChange","page","newTableData","cloneDeep","onSelectChange","value","Number","DeleteConfirm","combineReducers","getUser","userList","_action$payload$data2","validationSchema","Yup","shape","required","assigned_to","date","priorityOptions","TaskFormDialog","forwardRef","ref","initialData","onFormSubmit","onDiscard","taskForm","_Fragment","Formik","innerRef","initialValues","onSubmit","values","setSubmitting","formData","_ref2","touched","errors","isSubmitting","Form","FormContainer","FormItem","invalid","errorMessage","Field","autoComplete","placeholder","component","Input","_ref3","field","form","Select","options","filter","onChange","option","setFieldValue","_ref4","user","_ref5","DatePicker","Button","variant","icon","AiOutlineSave","defaultProps","injectReducer","taskFormReducer","TaskForm","_state$taskForm$state","Dialog","_priorityColor$select","_priorityColor$select2","_priorityColor$select3","_statusColor$selected","_statusColor$selected2","_statusColor$selected3","popNotification","keyword","EditTask","_state$task$state","_response$data","success","taskReducer","Task","onDialogOpen","Card","DescriptionModal","Tr","Td","TBody","Table","TableRowSkeleton","rows","avatarInColumns","avatarProps","Array","from","_","i","map","col","includes","Skeleton","Th","THead","IndeterminateCheckbox","indeterminate","onCheckBoxChange","onIndeterminateCheckBoxChange","rest","useRef","current","checked","Checkbox","e","handleChange","skeletonAvatarColumns","columnsProp","onSort","pageSizes","selectable","skeletonAvatarProps","tableWidth","sorting","setSorting","pageSizeOption","number","isArray","sortOrder","length","desc","order","key","hasOldColumnMetaKey","some","Header","accessor","Cell","finalColumns","undefined","minSize","maxSize","table","getIsAllRowsSelected","getIsSomeRowsSelected","getToggleAllRowsSelectedHandler","handleIndeterminateCheckBoxChange","target","getRowModel","getIsSelected","disabled","getCanSelect","getIsSomeSelected","getToggleSelectedHandler","handleCheckBoxChange","useReactTable","getCoreRowModel","getFilteredRowModel","getPaginationRowModel","getSortedRowModel","manualPagination","manualSorting","onSortingChange","columnResizeMode","resetSorting","resetSelected","toggleAllRowsSelected","useImperativeHandle","Alert","Loading","style","width","overflowX","tableLayout","getHeaderGroups","headerGroup","headers","colSpan","column","getSize","isPlaceholder","classNames","flexRender","columnDef","getContext","slice","getVisibleCells","Pagination","currentPage","minWidth","menuPlacement","isSearchable","handleSelectChange"],"sourceRoot":""}