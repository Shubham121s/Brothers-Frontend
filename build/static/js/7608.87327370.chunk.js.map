{"version":3,"file":"static/js/7608.87327370.chunk.js","mappings":"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","sources":["services/SuperAdmin/Sales/enquiry.js","components/shared/loaders/TableRowSkeleton.js","components/shared/DataTable.js","services/SuperAdmin/Customer/CustomerService.js","view/SuperAdmin/Sales/Quotation/QuotationList/store/dataSlice.js","view/SuperAdmin/Sales/Quotation/QuotationList/store/stateSlice.js","view/SuperAdmin/Sales/Quotation/QuotationList/store/index.js","view/SuperAdmin/Sales/Quotation/NewQuotation/store/dataSlice.js","view/SuperAdmin/Sales/Quotation/NewQuotation/store/index.js","view/SuperAdmin/Sales/Quotation/QuotationForm/components/ItemForm/ItemForm.js","view/SuperAdmin/Sales/Quotation/QuotationForm/components/InputInformationFields.js","view/SuperAdmin/Sales/Quotation/QuotationForm/components/SelectInformatinFields.js","view/SuperAdmin/Sales/Quotation/QuotationForm/index.js","view/SuperAdmin/Sales/Quotation/NewQuotation/index.js","view/SuperAdmin/Sales/Quotation/QuotationList/components/QuotationDeleteConfirmation.js","view/SuperAdmin/Sales/Quotation/QuotationList/components/QuotationTable.js","view/SuperAdmin/Sales/Quotation/QuotationList/components/QuotationTableTools.js","view/SuperAdmin/Sales/Quotation/QuotationList/index.js","../node_modules/form-data/lib/browser.js","services/SuperAdmin/Product/IndexService.js"],"sourcesContent":["import ApiService from \"../../ApiService\";\n\nexport async function apiPostNewEnquiry(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/enquiry/register\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiPostNewEnquiryList(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/enquiry/register\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiGetEnquiryById(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/enquiry/id\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiGetAllEnquiry(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/enquiry\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiDeleteEnquiry(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/enquiry/delete\",\n    method: \"delete\",\n    data,\n  });\n}\n\nexport async function apiPostNewEnquiryreview(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/enquiry/review\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiGetEnquiryDetailsByEnquiryId(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/enquiry/list\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiUpdateEnquiry(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/enquiry/update\",\n    method: \"put\",\n    data,\n  });\n}\n\nexport async function apiDeleteSelectedMaterial(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/enquiry/delete/id\",\n    method: \"delete\",\n    data,\n  });\n}\n\nexport async function apiGetReviewById(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/enquiry/review/id\",\n    method: \"post\",\n    data,\n  });\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Table, Skeleton } from '../../../components/ui'\n\nconst { Tr, Td, TBody } = Table\n\nconst TableRowSkeleton = (props) => {\n    const { columns, rows, avatarInColumns, avatarProps } = props\n\n    return (\n        <TBody>\n            {Array.from(new Array(rows), (_, i) => i + 0).map((row) => (\n                <Tr key={`row-${row}`}>\n                    {Array.from(new Array(columns), (_, i) => i + 0).map(\n                        (col) => (\n                            <Td key={`col-${col}`}>\n                                <div className=\"flex flex-auto items-center gap-2\">\n                                    {avatarInColumns.includes(col) && (\n                                        <div>\n                                            <Skeleton\n                                                variant=\"circle\"\n                                                {...avatarProps}\n                                            />\n                                        </div>\n                                    )}\n                                    <Skeleton />\n                                </div>\n                            </Td>\n                        )\n                    )}\n                </Tr>\n            ))}\n        </TBody>\n    )\n}\n\nTableRowSkeleton.propTypes = {\n    columns: PropTypes.number,\n    rows: PropTypes.number,\n    avatarInColumns: PropTypes.arrayOf(PropTypes.number),\n}\n\nTableRowSkeleton.defaultProps = {\n    columns: 1,\n    rows: 10,\n    avatarInColumns: [],\n}\n\nexport default TableRowSkeleton\n","import React, {\n  forwardRef,\n  useMemo,\n  useRef,\n  useEffect,\n  useState,\n  useImperativeHandle,\n} from \"react\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport {\n  Table,\n  Pagination,\n  Select,\n  Checkbox,\n  Alert,\n} from \"../../components/ui\";\nimport TableRowSkeleton from \"./loaders/TableRowSkeleton\";\nimport Loading from \"./Loading\";\nimport {\n  useReactTable,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  flexRender,\n} from \"@tanstack/react-table\";\n\nconst { Tr, Th, Td, THead, TBody } = Table;\n\nconst IndeterminateCheckbox = (props) => {\n  const {\n    indeterminate,\n    onChange,\n    onCheckBoxChange,\n    onIndeterminateCheckBoxChange,\n    ...rest\n  } = props;\n\n  const ref = useRef(null);\n\n  useEffect(() => {\n    if (typeof indeterminate === \"boolean\") {\n      ref.current.indeterminate = !rest.checked && indeterminate;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref, indeterminate]);\n\n  const handleChange = (e) => {\n    onChange(e);\n    onCheckBoxChange?.(e);\n    onIndeterminateCheckBoxChange?.(e);\n  };\n\n  return (\n    <Checkbox\n      className=\"mb-0\"\n      ref={ref}\n      onChange={(_, e) => handleChange(e)}\n      {...rest}\n    />\n  );\n};\n\nconst DataTable = forwardRef((props, ref) => {\n  const {\n    skeletonAvatarColumns,\n    columns: columnsProp,\n    data,\n    loading,\n    onCheckBoxChange,\n    onIndeterminateCheckBoxChange,\n    onPaginationChange,\n    onSelectChange,\n    onSort,\n    pageSizes,\n    selectable,\n    skeletonAvatarProps,\n    pagingData,\n    tableWidth = \"100%\",\n  } = props;\n\n  const { pageSize, pageIndex, total } = pagingData;\n\n  const [sorting, setSorting] = useState(null);\n\n  const pageSizeOption = useMemo(\n    () =>\n      pageSizes.map((number) => ({\n        value: number,\n        label: `${number} / page`,\n      })),\n    [pageSizes]\n  );\n\n  const handleCheckBoxChange = (checked, row) => {\n    if (!loading) {\n      onCheckBoxChange?.(checked, row);\n    }\n  };\n\n  const handleIndeterminateCheckBoxChange = (checked, rows) => {\n    if (!loading) {\n      onIndeterminateCheckBoxChange?.(checked, rows);\n    }\n  };\n\n  const handlePaginationChange = (page) => {\n    if (!loading) {\n      onPaginationChange?.(page);\n    }\n  };\n\n  const handleSelectChange = (value) => {\n    if (!loading) {\n      onSelectChange?.(Number(value));\n    }\n  };\n\n  useEffect(() => {\n    if (Array.isArray(sorting)) {\n      const sortOrder =\n        sorting.length > 0 ? (sorting[0].desc ? \"desc\" : \"asc\") : \"\";\n      const id = sorting.length > 0 ? sorting[0].id : \"\";\n      onSort?.({ order: sortOrder, key: id });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sorting]);\n\n  const hasOldColumnMetaKey = columnsProp.some(\n    (col) => col.Header || col.accessor || col.Cell\n  );\n\n  const finalColumns = useMemo(() => {\n    const columns = columnsProp.map((col) => ({\n      ...col,\n      size: col.size || undefined,\n      minSize: col.minSize || 100,\n      maxSize: col.maxSize || 300,\n    }));\n\n    if (selectable) {\n      return [\n        {\n          id: \"select\",\n          header: ({ table }) => (\n            <IndeterminateCheckbox\n              checked={table.getIsAllRowsSelected()}\n              indeterminate={table.getIsSomeRowsSelected()}\n              onChange={table.getToggleAllRowsSelectedHandler()}\n              onIndeterminateCheckBoxChange={(e) => {\n                handleIndeterminateCheckBoxChange(\n                  e.target.checked,\n                  table.getRowModel().rows\n                );\n              }}\n            />\n          ),\n          cell: ({ row }) => (\n            <IndeterminateCheckbox\n              checked={row.getIsSelected()}\n              disabled={!row.getCanSelect()}\n              indeterminate={row.getIsSomeSelected()}\n              onChange={row.getToggleSelectedHandler()}\n              onCheckBoxChange={(e) =>\n                handleCheckBoxChange(e.target.checked, row.original)\n              }\n            />\n          ),\n          size: 50,\n          minSize: 50,\n          maxSize: 50,\n        },\n        ...columns,\n      ];\n    }\n    return columns;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [columnsProp, selectable]);\n\n  const table = useReactTable({\n    data,\n    columns: hasOldColumnMetaKey ? [] : finalColumns,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    manualPagination: true,\n    manualSorting: true,\n    onSortingChange: setSorting,\n    state: {\n      sorting,\n    },\n    columnResizeMode: \"onChange\",\n  });\n\n  const resetSorting = () => {\n    table.resetSorting();\n  };\n\n  const resetSelected = () => {\n    table.toggleAllRowsSelected(false);\n  };\n\n  useImperativeHandle(ref, () => ({\n    resetSorting,\n    resetSelected,\n  }));\n\n  if (hasOldColumnMetaKey) {\n    const message =\n      \"You are using old react-table v7 column config, please use v8 column config instead, refer to our demo or https://tanstack.com/table/v8\";\n\n    if (process.env.NODE_ENV === \"development\") {\n      console.warn(message);\n    }\n\n    return <Alert>{message}</Alert>;\n  }\n\n  return (\n    <Loading loading={loading && data.length !== 0} type=\"cover\">\n      <div style={{ width: tableWidth, overflowX: \"auto\" }}>\n        <Table style={{ width: \"100%\", tableLayout: \"fixed\" }}>\n          <THead>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <Tr key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <Th\n                      key={header.id}\n                      colSpan={header.colSpan}\n                      style={{ width: `${header.column.getSize()}px` }}\n                    >\n                      {header.isPlaceholder ? null : (\n                        <div\n                          className={classNames(\n                            // header.column.getCanSort() && 'cursor-pointer select-none point',\n                            loading && \"pointer-events-none\"\n                          )}\n                          // onClick={header.column.getToggleSortingHandler()}\n                        >\n                          {flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                          {/* {header.column.getCanSort() && <Sorter sort={header.column.getIsSorted()} />} */}\n                        </div>\n                      )}\n                    </Th>\n                  );\n                })}\n              </Tr>\n            ))}\n          </THead>\n          {loading && data.length === 0 ? (\n            <TableRowSkeleton\n              columns={finalColumns.length}\n              rows={pagingData.pageSize}\n              avatarInColumns={skeletonAvatarColumns}\n              avatarProps={skeletonAvatarProps}\n            />\n          ) : (\n            <TBody>\n              {table\n                .getRowModel()\n                .rows.slice(0, pageSize)\n                .map((row) => {\n                  return (\n                    <Tr key={row.id}>\n                      {row.getVisibleCells().map((cell) => {\n                        return (\n                          <Td\n                            key={cell.id}\n                            style={{ width: `${cell.column.getSize()}px` }}\n                          >\n                            {flexRender(\n                              cell.column.columnDef.cell,\n                              cell.getContext()\n                            )}\n                          </Td>\n                        );\n                      })}\n                    </Tr>\n                  );\n                })}\n            </TBody>\n          )}\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-between mt-4\">\n        <Pagination\n          pageSize={pageSize}\n          currentPage={pageIndex}\n          total={total}\n          onChange={handlePaginationChange}\n        />\n        <div style={{ minWidth: 130 }}>\n          <Select\n            size=\"sm\"\n            menuPlacement=\"top\"\n            isSearchable={false}\n            value={pageSizeOption.filter((option) => option.value === pageSize)}\n            options={pageSizeOption}\n            onChange={(option) => handleSelectChange(option.value)}\n          />\n        </div>\n      </div>\n    </Loading>\n  );\n});\n\nDataTable.propTypes = {\n  columns: PropTypes.array,\n  data: PropTypes.array,\n  loading: PropTypes.bool,\n  onCheckBoxChange: PropTypes.func,\n  onIndeterminateCheckBoxChange: PropTypes.func,\n  onPaginationChange: PropTypes.func,\n  onSelectChange: PropTypes.func,\n  onSort: PropTypes.func,\n  pageSizes: PropTypes.arrayOf(PropTypes.number),\n  selectable: PropTypes.bool,\n  skeletonAvatarColumns: PropTypes.arrayOf(PropTypes.number),\n  skeletonAvatarProps: PropTypes.object,\n  pagingData: PropTypes.shape({\n    total: PropTypes.number,\n    pageIndex: PropTypes.number,\n    pageSize: PropTypes.number,\n  }),\n};\n\nDataTable.defaultProps = {\n  pageSizes: [10, 25, 50, 100],\n  pagingData: {\n    total: 0,\n    pageIndex: 1,\n    pageSize: 10,\n  },\n  data: [],\n  columns: [],\n  selectable: false,\n  loading: false,\n};\n\nexport default DataTable;\n","import ApiService from \"../../ApiService\";\n\nexport async function apiGetCustomerStatisticData() {\n  return ApiService.fetchData({\n    url: \"v1/web/company/customer/statistic\",\n    method: \"get\",\n  });\n}\n\n// export async function apiDeleteCustomer(data) {\n//   return ApiService.fetchData({\n//     url: \"v1/web/company/customer/delete\",\n//     method: \"delete\",\n//     data,\n//   });\n// }\n\nexport async function apiUpdateCustomerDetails(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/customer/update\",\n    method: \"put\",\n    data,\n  });\n}\n\nexport async function apiGetAllCustomers(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/customer/select\",\n    method: \"get\",\n  });\n}\n\nexport async function apiPostRegisterNewCustomer(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/customer/register\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiUpdateCustomer(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/customer/update/id\",\n    method: \"put\",\n    data,\n  });\n}\nexport async function apiGetCustomersWithPagination(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/customer\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiGetCustomerDetailsByCustomerId(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/customer/details/id\",\n    method: \"post\",\n    data,\n  });\n}\n\nexport async function apiGetAllCustomersOption() {\n  return ApiService.fetchData({\n    url: \"v1/web/company/customer/option\",\n    method: \"get\",\n  });\n}\n\nexport async function apiDeleteCustomer(data) {\n  return ApiService.fetchData({\n    url: \"v1/web/company/customer/delete/id\",\n    method: \"delete\",\n    data,\n  });\n}\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport {\n  apiGetAllEnquiry,\n  apiDeleteEnquiry,\n} from \"../../../../../../services/SuperAdmin/Sales/enquiry\";\n\nexport const getAllEnquiry = createAsyncThunk(\n  \"quotation/data/all/enquiry\",\n  async (data) => {\n    try {\n      const response = await apiGetAllEnquiry(data);\n      return response;\n    } catch (error) {\n      return error?.response;\n    }\n  }\n);\n\nexport const deleteEnquiry = createAsyncThunk(\n  \"quotation/data/delete/enquiry\",\n  async (data) => {\n    try {\n      const response = await apiDeleteEnquiry(data);\n      return response;\n    } catch (error) {\n      return error?.response;\n    }\n  }\n);\n\nexport const initialTableData = {\n  total: 0,\n  pageIndex: 1,\n  pageSize: 10,\n  query: \"\",\n};\n\nconst dataSlice = createSlice({\n  name: \"quotation/data\",\n  initialState: {\n    loading: false,\n    enquiryList: [],\n    tableData: initialTableData,\n  },\n  reducers: {\n    setTableData: (state, action) => {\n      state.tableData = action.payload;\n    },\n  },\n  extraReducers: {\n    [getAllEnquiry.fulfilled]: (state, action) => {\n      state.enquiryList = action.payload.data?.data || [];\n      state.tableData.table = action.payload.data.total || 0;\n      state.loading = false;\n    },\n    [getAllEnquiry.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [deleteEnquiry.fulfilled]: (state, action) => {},\n  },\n});\n\nexport const { setTableData, setFilterData } = dataSlice.actions;\n\nexport default dataSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst stateSlice = createSlice({\n  name: \"quotation/state\",\n  initialState: {\n    deleteConfirmation: false,\n    selectedEnquiry: {},\n    openDrawer: false,\n  },\n  reducers: {\n    togglDeleteConfirmationDialog: (state, action) => {\n      state.deleteConfirmation = action.payload;\n    },\n    toggleDrawer: (state, action) => {\n      state.openDrawer = action.payload;\n    },\n    setSelectedEnquiry: (state, action) => {\n      state.selectedEnquiry = action.payload;\n    },\n  },\n});\n\nexport const {\n  togglDeleteConfirmationDialog,\n  setSelectedEnquiry,\n  toggleDrawer,\n} = stateSlice.actions;\n\nexport default stateSlice.reducer;\n","import { combineReducers } from \"@reduxjs/toolkit\";\nimport data from \"./dataSlice\";\nimport state from \"./stateSlice\";\nconst quotationReducer = combineReducers({\n  data,\n  state,\n});\n\nexport default quotationReducer;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { apiGetAllCustomers } from \"../../../../../../services/SuperAdmin/Customer/CustomerService\";\nimport { apiGetAllProductsWithDrawing } from \"../../../../../../services/SuperAdmin/Product/IndexService\";\nimport { apiPostNewEnquiry } from \"../../../../../../services/SuperAdmin/Sales/enquiry\";\n\nexport const getAllCustomers = createAsyncThunk(\n  \"new/quotation/data/customer/all\",\n  async () => {\n    try {\n      const response = await apiGetAllCustomers();\n      return response;\n    } catch (error) {\n      return error?.response;\n    }\n  }\n);\n\nexport const getAllProductsWithDrawing = createAsyncThunk(\n  \"new/quotation/data/product/all\",\n  async () => {\n    try {\n      const response = await apiGetAllProductsWithDrawing();\n      return response;\n    } catch (error) {\n      return error?.response;\n    }\n  }\n);\n\nexport const postNewEnquiry = createAsyncThunk(\n  \"new/quotation/data/register\",\n  async (data) => {\n    try {\n      const response = await apiPostNewEnquiry(data);\n      return response;\n    } catch (error) {\n      return error?.response;\n    }\n  }\n);\n\nconst dataSlice = createSlice({\n  name: \"new/quotation/data\",\n  initialState: {\n    customers: [],\n    products: [],\n  },\n  extraReducers: {\n    [getAllCustomers.fulfilled]: (state, action) => {\n      state.customers = action.payload.data?.data || [];\n    },\n    [postNewEnquiry.fulfilled]: (state) => {},\n    [getAllProductsWithDrawing.fulfilled]: (state, action) => {\n      state.products = action.payload.data?.data || [];\n    },\n  },\n});\n\nexport default dataSlice.reducer;\n","import { combineReducers } from \"@reduxjs/toolkit\";\nimport data from \"./dataSlice\";\n// import state from \"./stateSlice\";\nconst newQuotationReducer = combineReducers({\n  data,\n});\n\nexport default newQuotationReducer;\n","import React, { useMemo } from \"react\";\nimport { Field, FieldArray, Form, Formik, getIn } from \"formik\";\nimport {\n  FormItem,\n  Button,\n  Input,\n  Select,\n  DatePicker,\n  Table,\n} from \"../../../../../../../components/ui\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { components } from \"react-select\";\n\nimport { HiOutlineTrash } from \"react-icons/hi\";\nimport { BsBorderRight } from \"react-icons/bs\";\nconst { Tr, Th, Td, THead, TBody } = Table;\nconst { Control } = components;\n\nconst ItemForm = ({ values, errors, touched, Products = [] }) => {\n  const fieldFeedback = (form, name) => {\n    const error = getIn(form.errors, name);\n    const touch = getIn(form.touched, name);\n    return {\n      // errorMessage: error || \"\",\n      invalid: touch && Boolean(error),\n    };\n  };\n\n  const productData = useMemo(() => {\n    return Products.map((product) => {\n      return { label: product.name, value: product };\n    });\n  }, [Products]);\n\n  const CustomConTrol = ({ children, ...props }) => {\n    const selected = props.getValue()[0];\n    return (\n      <Control {...props}>\n        {selected && (\n          <span className=\"ml-2 font-semibold uppercase\">\n            {selected?.value?.item_code} :\n          </span>\n        )}\n        {children}\n      </Control>\n    );\n  };\n\n  const CustomSelectOption = ({ innerProps, label, data, isSelected }) => {\n    return (\n      <div\n        className={`flex items-center justify-between p-2 ${\n          isSelected ? \"bg-gray-100\" : \"hover:bg-gray-50\"\n        }`}\n        {...innerProps}\n      >\n        <div className=\"items-center flex justify-between w-full\">\n          <div className=\"ml-2 uppercase\">\n            {`${label} ( ${data?.value?.item_code})`}\n          </div>\n          {isSelected && <HiCheck className=\"text-emerald-500 text-xl\" />}\n        </div>\n      </div>\n    );\n  };\n\n  const style = {\n    textAlign: \"center\",\n    border: \".2px solid lightGray\",\n    width: \"130px\",\n  };\n\n  // Product: null,\n  // casting_drawing_no: \"\",\n  // machining_drawing_no: \"\",\n  // material: \"\",\n  // quantity: \"\",\n  // raw_weight: \"\",\n  // raw_per_kg_rate: \"\",\n  // raw_material_cost: \"\",\n  // machining: \"\",\n  // blasting_primer_paint: \"\",\n  // packing_cost: \"\",\n  // total_per_unit_cost1: \"\",\n  // profit: \"\",\n  // total_per_unit_cost2: \"\",\n  // pattern_tooling_cost: \"\",\n  // lead_time: \"\",\n\n  return (\n    <div style={{ overflowX: \"auto\", width: \"auto\" }}>\n      <Table\n        className=\"relative\"\n        compact={true}\n        style={{ width: \"max-content\" }}\n      >\n        <THead className=\"sticky\" style={{ top: \"-.2px\" }}>\n          <Tr>\n            <Th\n              style={{\n                textAlign: \"center\",\n                border: \".2px solid lightGray\",\n                widTh: \"15px\",\n              }}\n              rowSpan=\"3\"\n            >\n              Sr\n            </Th>\n            <Th style={{ ...style, width: \"230px\" }} rowSpan=\"3\">\n              Item Name\n            </Th>\n            <Th style={style} rowSpan=\"3\">\n              Drawing Rev. No.\n            </Th>\n            <Th style={style} rowSpan=\"3\">\n              Material Grade\n            </Th>\n            <Th style={style} rowSpan=\"3\">\n              MOQ QTY\n            </Th>\n            <Th\n              style={{ ...style, BsBorderRight: \"1px solid lightGray\" }}\n              rowSpan=\"2\"\n              colSpan=\"1\"\n            >\n              RAW Weight\n            </Th>\n            <Th style={style} colSpan=\"9\">\n              Costing INR\n            </Th>\n            <Th style={style} rowSpan=\"3\">\n              Lead Time\n            </Th>\n            <Th\n              style={{\n                textAlign: \"center\",\n                border: \".2px solid lightGray\",\n                width: \"30px\",\n              }}\n              rowSpan=\"3\"\n            >\n              Action\n            </Th>\n          </Tr>\n          <Tr>\n            <Th style={style} colSpan=\"1\">\n              Raw per Kg rate\n            </Th>\n            <Th style={style} colSpan=\"1\">\n              Raw Material cost\n            </Th>\n            <Th style={style} colSpan=\"1\">\n              Machining\n            </Th>\n            <Th style={style} colSpan=\"1\">\n              Blasting, Primer Paint\n            </Th>\n            <Th style={style} colSpan=\"1\">\n              EX-Work Packing Cost\n            </Th>\n            <Th style={style} colSpan=\"1\">\n              {\"Total per Unit Cost (Ex-Work)\"}\n            </Th>\n            <Th style={style} colSpan=\"1\">\n              {\"Profit (7%)\"}\n            </Th>\n            <Th style={style} colSpan=\"1\">\n              {\"Total per Unit Cost (Ex-Work)\"}\n            </Th>\n            <Th style={style} colSpan=\"1\">\n              Pattern and Tooling Cost\n            </Th>\n          </Tr>\n          <Tr>\n            <Th style={style}>A</Th>\n            <Th style={style}>B</Th>\n            <Th style={style}>{`C=(AXB)`}</Th>\n            <Th style={style}>D</Th>\n            <Th style={style}>G</Th>\n            <Th style={style}>F</Th>\n            <Th style={style}>{`T=C+D+F+E+G`}</Th>\n            <Th style={style}>p</Th>\n            <Th style={style}>{`TT=T+P`}</Th>\n            <Th style={style}>PT</Th>\n          </Tr>\n        </THead>\n        <TBody>\n          <FieldArray name=\"items\">\n            {({ form, remove, push }) => (\n              <>\n                {values.items && values.items.length > 0\n                  ? values.items.map((_, index) => {\n                      const paroductFeedBack = fieldFeedback(\n                        form,\n                        `items[${index}].Product`\n                      );\n\n                      values.items[index][\"raw_material_cost\"] = (\n                        parseFloat(values.items[index][\"raw_weight\"]) *\n                        parseFloat(values.items[index][\"raw_per_kg_rate\"])\n                      ).toFixed(2);\n\n                      // const drawingRevisionFeedBack = fieldFeedback(\n                      //   form,\n                      //   `items[${index}].drawing_revision`\n                      // );\n\n                      // const quantityFeedBack = fieldFeedback(\n                      //   form,\n                      //   `items[${index}].quantity`\n                      // );\n                      // const deliveryFeedBack = fieldFeedback(\n                      //   form,\n                      //   `items[${index}].delivery_date`\n                      // );\n                      return (\n                        <Tr key={index}>\n                          <Td\n                            style={{\n                              ...style,\n                              width: \"15px\",\n                            }}\n                          >\n                            {index + 1}.\n                          </Td>\n                          <Td style={style}>\n                            <FormItem\n                              label=\"\"\n                              className=\"mb-2\"\n                              // invalid={paroductFeedBack.invalid}\n                              // // errorMessage={paroductFeedBack.errorMessage}\n                            >\n                              <Field\n                                name={`items[${index}].Product`}\n                                // // invalid={paroductFeedBack.invalid}\n                              >\n                                {({ field, form }) => (\n                                  <Select\n                                    field={field}\n                                    form={form}\n                                    size=\"sm\"\n                                    className=\"w-full\"\n                                    options={productData}\n                                    components={{\n                                      Option: CustomSelectOption,\n                                      ConTrol: CustomConTrol,\n                                    }}\n                                    value={productData.find(\n                                      (product) =>\n                                        product.value?.product_id ===\n                                        values.items[index]?.Product?.product_id\n                                    )}\n                                    onChange={(option) => {\n                                      form.setFieldValue(\n                                        field.name,\n                                        option.value\n                                      );\n                                    }}\n                                    menuPortalTarget={document.body}\n                                    styles={{\n                                      menuPortal: (base) => ({\n                                        ...base,\n                                        zIndex: 9999,\n                                      }),\n                                    }}\n                                  />\n                                )}\n                              </Field>\n                            </FormItem>\n                          </Td>\n                          <Td style={style}>\n                            <FormItem\n                              label=\"\"\n                              className=\"mb-2\"\n                              // // invalid={drawingRevisionFeedBack.invalid}\n                              // // errorMessage={drawingRevisionFeedBack.errorMessage}\n                            >\n                              <Field\n                                autoComplete=\"off\"\n                                // // invalid={drawingRevisionFeedBack.invalid}\n                                type=\"text\"\n                                name={`items[${index}].revision_number`}\n                                size=\"sm\"\n                                disabled={true}\n                                component={Input}\n                              />\n                            </FormItem>\n                          </Td>\n                          <Td style={style}>\n                            <FormItem\n                              label=\"\"\n                              className=\"mb-2\"\n                              // // invalid={deliveryFeedBack.invalid}\n                              // // errorMessage={deliveryFeedBack.errorMessage}\n                            >\n                              <Field\n                                // // invalid={deliveryFeedBack.invalid}\n                                autoComplete=\"off\"\n                                disabled={true}\n                                type=\"text\"\n                                name={`items[${index}].material`}\n                                size=\"sm\"\n                                component={Input}\n                              />\n                            </FormItem>\n                          </Td>\n                          <Td style={style}>\n                            <FormItem\n                              label=\"\"\n                              className=\"mb-2\"\n                              // // invalid={deliveryFeedBack.invalid}\n                              // // errorMessage={deliveryFeedBack.errorMessage}\n                            >\n                              <Field\n                                // // invalid={deliveryFeedBack.invalid}\n                                autoComplete=\"off\"\n                                type=\"text\"\n                                name={`items[${index}].quantity`}\n                                size=\"sm\"\n                                component={Input}\n                              />\n                            </FormItem>\n                          </Td>\n\n                          <Td style={style}>\n                            <FormItem\n                              label=\"\"\n                              className=\"mb-2\"\n                              // // invalid={deliveryFeedBack.invalid}\n                              // // errorMessage={deliveryFeedBack.errorMessage}\n                            >\n                              <Field\n                                // // invalid={deliveryFeedBack.invalid}\n                                autoComplete=\"off\"\n                                type=\"text\"\n                                name={`items[${index}].raw_weight`}\n                                size=\"sm\"\n                                component={Input}\n                              />\n                            </FormItem>\n                          </Td>\n\n                          <Td style={style}>\n                            <FormItem\n                              label=\"\"\n                              className=\"mb-2\"\n                              // // invalid={deliveryFeedBack.invalid}\n                              // // errorMessage={deliveryFeedBack.errorMessage}\n                            >\n                              <Field\n                                // // invalid={deliveryFeedBack.invalid}\n                                autoComplete=\"off\"\n                                type=\"text\"\n                                name={`items[${index}].raw_per_kg_rate`}\n                                size=\"sm\"\n                                component={Input}\n                              />\n                            </FormItem>\n                          </Td>\n\n                          <Td style={style}>\n                            <FormItem\n                              label=\"\"\n                              className=\"mb-2\"\n                              // // invalid={deliveryFeedBack.invalid}\n                              // // errorMessage={deliveryFeedBack.errorMessage}\n                            >\n                              <Field\n                                // // invalid={deliveryFeedBack.invalid}\n                                autoComplete=\"off\"\n                                type=\"text\"\n                                name={`items[${index}].raw_material_cost`}\n                                size=\"sm\"\n                                component={Input}\n                              />\n                            </FormItem>\n                          </Td>\n\n                          <Td style={style}>\n                            <FormItem\n                              label=\"\"\n                              className=\"mb-2\"\n                              // // invalid={deliveryFeedBack.invalid}\n                              // // errorMessage={deliveryFeedBack.errorMessage}\n                            >\n                              <Field\n                                // // invalid={deliveryFeedBack.invalid}\n                                autoComplete=\"off\"\n                                type=\"text\"\n                                name={`items[${index}].machining`}\n                                size=\"sm\"\n                                component={Input}\n                              />\n                            </FormItem>\n                          </Td>\n\n                          <Td style={style}>\n                            <FormItem\n                              label=\"\"\n                              className=\"mb-2\"\n                              // // invalid={deliveryFeedBack.invalid}\n                              // // errorMessage={deliveryFeedBack.errorMessage}\n                            >\n                              <Field\n                                // // invalid={deliveryFeedBack.invalid}\n                                autoComplete=\"off\"\n                                type=\"text\"\n                                name={`items[${index}].blasting_primer_paint`}\n                                size=\"sm\"\n                                component={Input}\n                              />\n                            </FormItem>\n                          </Td>\n\n                          <Td style={style}>\n                            <FormItem\n                              label=\"\"\n                              className=\"mb-2\"\n                              // // invalid={deliveryFeedBack.invalid}\n                              // // errorMessage={deliveryFeedBack.errorMessage}\n                            >\n                              <Field\n                                // // invalid={deliveryFeedBack.invalid}\n                                autoComplete=\"off\"\n                                type=\"text\"\n                                name={`items[${index}].packing_cost`}\n                                size=\"sm\"\n                                component={Input}\n                              />\n                            </FormItem>\n                          </Td>\n\n                          <Td style={style}>\n                            <FormItem\n                              label=\"\"\n                              className=\"mb-2\"\n                              // // invalid={deliveryFeedBack.invalid}\n                              // // errorMessage={deliveryFeedBack.errorMessage}\n                            >\n                              <Field\n                                // // invalid={deliveryFeedBack.invalid}\n                                autoComplete=\"off\"\n                                type=\"text\"\n                                name={`items[${index}].total_per_unit_cost1`}\n                                size=\"sm\"\n                                component={Input}\n                              />\n                            </FormItem>\n                          </Td>\n\n                          <Td style={style}>\n                            <FormItem\n                              label=\"\"\n                              className=\"mb-2\"\n                              // // invalid={deliveryFeedBack.invalid}\n                              // // errorMessage={deliveryFeedBack.errorMessage}\n                            >\n                              <Field\n                                // // invalid={deliveryFeedBack.invalid}\n                                autoComplete=\"off\"\n                                type=\"text\"\n                                name={`items[${index}].profit`}\n                                size=\"sm\"\n                                component={Input}\n                              />\n                            </FormItem>\n                          </Td>\n\n                          <Td style={style}>\n                            <FormItem\n                              label=\"\"\n                              className=\"mb-2\"\n                              // // invalid={deliveryFeedBack.invalid}\n                              // // errorMessage={deliveryFeedBack.errorMessage}\n                            >\n                              <Field\n                                // // invalid={deliveryFeedBack.invalid}\n                                autoComplete=\"off\"\n                                type=\"text\"\n                                name={`items[${index}].total_per_unit_cost2`}\n                                size=\"sm\"\n                                component={Input}\n                              />\n                            </FormItem>\n                          </Td>\n\n                          <Td style={style}>\n                            <FormItem\n                              label=\"\"\n                              className=\"mb-2\"\n                              // // invalid={deliveryFeedBack.invalid}\n                              // // errorMessage={deliveryFeedBack.errorMessage}\n                            >\n                              <Field\n                                // // invalid={deliveryFeedBack.invalid}\n                                autoComplete=\"off\"\n                                type=\"text\"\n                                name={`items[${index}].pattern_tooling_cost`}\n                                size=\"sm\"\n                                component={Input}\n                              />\n                            </FormItem>\n                          </Td>\n\n                          <Td style={style}>\n                            <FormItem\n                              label=\"\"\n                              className=\"mb-2\"\n                              // // invalid={deliveryFeedBack.invalid}\n                              // // errorMessage={deliveryFeedBack.errorMessage}\n                            >\n                              <Field\n                                // // invalid={deliveryFeedBack.invalid}\n                                autoComplete=\"off\"\n                                type=\"text\"\n                                name={`items[${index}].lead_time`}\n                                size=\"sm\"\n                                component={Input}\n                              />\n                            </FormItem>\n                          </Td>\n                          <Td\n                            style={{\n                              textAlign: \"center\",\n                              border: \".2px solid lightGray\",\n                              widTh: \"100px\",\n                            }}\n                          >\n                            <Button\n                              shape=\"circle\"\n                              size=\"sm\"\n                              onClick={() => remove(index)}\n                              icon={<HiOutlineTrash />}\n                            ></Button>\n                          </Td>\n                        </Tr>\n                      );\n                    })\n                  : null}\n\n                <Tr>\n                  <Td colSpan={18} style={{ textAlign: \"end\" }}>\n                    <Button\n                      type=\"button\"\n                      size=\"sm\"\n                      variant=\"solid\"\n                      color=\"purple-600\"\n                      onClick={() => {\n                        push({\n                          Product: null,\n                          casting_drawing_no: \"\",\n                          machining_drawing_no: \"\",\n                          material: \"\",\n                          quantity: \"\",\n                          raw_weight: \"\",\n                          raw_per_kg_rate: \"\",\n                          raw_material_cost: \"\",\n                          machining: \"\",\n                          blasting_primer_paint: \"\",\n                          packing_cost: \"\",\n                          total_per_unit_cost1: \"\",\n                          profit: \"\",\n                          total_per_unit_cost2: \"\",\n                          pattern_tooling_cost: \"\",\n                          lead_time: \"\",\n                        });\n                      }}\n                    >\n                      Add an Product\n                    </Button>\n                  </Td>\n                </Tr>\n              </>\n            )}\n          </FieldArray>\n        </TBody>\n      </Table>\n    </div>\n  );\n};\n\nexport default ItemForm;\n","import React, { memo } from \"react\";\nimport { FormItem, Input } from \"../../../../../../components/ui\";\nimport { Field } from \"formik\";\n\nconst InputInformationFields = (props) => {\n  const {\n    errors,\n    touched,\n    label,\n    name,\n    placeholder = \"\",\n    type = \"text\",\n  } = props;\n  return (\n    <FormItem\n      className=\"mb-4\"\n      label={label}\n      invalid={errors && touched}\n      errorMessage={errors}\n    >\n      <Field\n        type={type}\n        autoComplete=\"off\"\n        name={name}\n        placeholder={placeholder}\n        component={Input}\n      />\n    </FormItem>\n  );\n};\n\nexport default memo(InputInformationFields);\n","import React, { memo } from \"react\";\nimport { FormItem, Select } from \"../../../../../../components/ui\";\nimport { Field } from \"formik\";\n\nconst SelectInformationFields = (props) => {\n  const { errors, touched, name, data, values, label } = props;\n  return (\n    <FormItem\n      className=\"mb-3\"\n      label={label}\n      invalid={errors && touched}\n      errorMessage={errors}\n    >\n      <Field name={name}>\n        {({ field, form }) => (\n          <Select\n            field={field}\n            form={form}\n            options={data}\n            value={data.filter((item) => item.value === values)}\n            onChange={(option) => form.setFieldValue(field.name, option.value)}\n          />\n        )}\n      </Field>\n    </FormItem>\n  );\n};\n\nexport default memo(SelectInformationFields);\n","import React, { forwardRef, useEffect, useMemo, useState } from \"react\";\nimport FormData from \"form-data\";\nimport {\n  Input,\n  Button,\n  Select,\n  DatePicker,\n  Upload,\n  FormItem,\n  Card,\n  FormContainer,\n} from \"../../../../../components/ui\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport { AiOutlineSave } from \"react-icons/ai\";\nimport { Field, Form, Formik } from \"formik\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as Yup from \"yup\";\nimport { useNavigate } from \"react-router-dom\";\nimport { StickyFooter } from \"../../../../../components/shared\";\nimport ItemForm from \"../QuotationForm/components/ItemForm/ItemForm\";\nimport InputInformationFields from \"./components/InputInformationFields\";\nimport SelectInformatinFields from \"./components/SelectInformatinFields\";\nimport { EnquiryType } from \"./constant\";\n\nconst validationSchema = Yup.object().shape({\n  customer_id: Yup.string().required(\"Required\"),\n  enquiry_date: Yup.string().required(\"Required\"),\n  enquiry_type: Yup.string().required(\"Required\"),\n  enq_number: Yup.string().required(\"Required\"),\n  poc_name: Yup.string().required(\"Required\"),\n  poc_contact: Yup.string().required(\"Required\"),\n  items: Yup.array().of(\n    Yup.object().shape({\n      Product: Yup.object().required(\"Required\"),\n      drawing_revision: Yup.string()\n        .required(\"Required\")\n        .test((drawing, ctx) => {\n          if (\n            !ctx.parent?.Product?.Drawings.some(\n              (drawingRevision) => drawingRevision.revision_number === drawing\n            )\n          )\n            return ctx.createError({ message: \"Not Matched\" });\n          return true;\n        }),\n      quantity: Yup.string().required(\"Required\"),\n      delivery_date: Yup.string()\n        .required(\"Required\")\n        .matches(/^\\d{4}-\\d{2}-\\d{2}$/, \"format YYYY-MM-DD\"),\n    })\n  ),\n});\n\nconst QuotationForm = forwardRef((props, ref) => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const { type, initialData, onFormSubmit, onDiscard, Customers, Products } =\n    props;\n\n  const CustomerOption = useMemo(\n    () =>\n      Customers.map((m) => {\n        return { label: m.name, value: m.customer_id };\n      }),\n    [Customers]\n  );\n\n  return (\n    <>\n      <div>\n        <Formik\n          enableReinitialize={true}\n          innerRef={ref}\n          initialValues={{\n            ...initialData,\n          }}\n          validationSchema={validationSchema}\n          onSubmit={(values, { setSubmitting }) => {\n            const formData = cloneDeep(values);\n            onFormSubmit?.(formData, setSubmitting);\n          }}\n        >\n          {({\n            values,\n            errors,\n            touched,\n            isSubmitting,\n            setErrors,\n            handleSubmit,\n            resetForm,\n          }) => {\n            return (\n              <Form>\n                <FormContainer>\n                  <Card className=\" h-max border-rose-800 bg-rose-50\">\n                    <div className=\"grid grid-cols-7 gap-3\">\n                      <SelectInformatinFields\n                        errors={errors?.customer_id}\n                        touched={touched?.customer_id}\n                        name=\"enq_number\"\n                        data={CustomerOption}\n                        values={values.enq_number}\n                        label=\"Customer\"\n                      />\n                      <SelectInformatinFields\n                        errors={errors?.customer_id}\n                        touched={touched?.customer_id}\n                        name=\"customer_id\"\n                        data={CustomerOption}\n                        values={values.customer_id}\n                        label=\"Customer\"\n                      />\n                      <InputInformationFields\n                        errors={errors?.quotation_number}\n                        touched={touched?.quotation_number}\n                        placeholder=\"Quotation Number\"\n                        label=\"Quotation No.\"\n                        name=\"quotation_number\"\n                        type=\"text\"\n                      />\n\n                      <FormItem\n                        label=\"Quotation Date\"\n                        invalid={\n                          errors.quotation_date && touched.quotation_date\n                        }\n                        errorMessage={errors.quotation_date}\n                        className=\"mb-2\"\n                      >\n                        <Field name=\"quotation_date\" placeholder=\"Date\">\n                          {({ field, form }) => (\n                            <DatePicker\n                              field={field}\n                              form={form}\n                              value={values.date}\n                              onChange={(date) => {\n                                form.setFieldValue(field.name, date);\n                              }}\n                            />\n                          )}\n                        </Field>\n                      </FormItem>\n                      <InputInformationFields\n                        placeholder=\"Project\"\n                        label=\"Project\"\n                        name=\"project\"\n                        type=\"text\"\n                      />\n                    </div>\n                  </Card>\n                  <div className=\"mt-4\">\n                    <ItemForm\n                      values={values}\n                      Products={Products}\n                      errors={errors}\n                      touched={touched}\n                    />\n                  </div>\n                  <StickyFooter\n                    className=\"-mx-8 px-8 flex items-center justify-end py-4\"\n                    stickyClass=\"border-t bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700\"\n                  >\n                    <div className=\"md:flex items-center\">\n                      <Button size=\"sm\" className=\"mr-3\" type=\"button\">\n                        Discard\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"solid\"\n                        icon={<AiOutlineSave className=\"mr-1\" />}\n                        type=\"submit\"\n                      >\n                        Save\n                      </Button>\n                    </div>\n                  </StickyFooter>\n                </FormContainer>\n              </Form>\n            );\n          }}\n        </Formik>\n      </div>\n    </>\n  );\n});\n\nQuotationForm.defaultProps = {\n  type: \"new\",\n  initialData: {\n    customer_id: \"\",\n    enq_number: \"\",\n    quotation_number: \"\",\n    quotation_date: new Date(),\n    project: \"\",\n    items: [\n      {\n        Product: null,\n        revision_number: \"\",\n        material: \"\",\n        quantity: \"\",\n        raw_weight: \"\",\n        raw_per_kg_rate: \"\",\n        raw_material_cost: \"\",\n        machining: \"\",\n        blasting_primer_paint: \"\",\n        packing_cost: \"\",\n        total_per_unit_cost1: \"\",\n        profit: \"\",\n        total_per_unit_cost2: \"\",\n        pattern_tooling_cost: \"\",\n        lead_time: \"\",\n      },\n    ],\n  },\n};\n\nexport default QuotationForm;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Notification,\n  Toast,\n  Drawer,\n  Button,\n} from \"../../../../../components/ui\";\nimport { injectReducer } from \"../../../../../store\";\nimport newQuotationReducer from \"./store\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { toggleDrawer } from \"../QuotationList/store/stateSlice\";\nimport { getAllCustomers, getAllProductsWithDrawing } from \"./store/dataSlice\";\nimport QuotationForm from \"../QuotationForm\";\nimport { postNewEnquiry } from \"./store/dataSlice\";\nimport { getAllEnquiry } from \"../QuotationList/store/dataSlice\";\n\ninjectReducer(\"quotation_new\", newQuotationReducer);\n\nconst popNotification = (keyword, type, message) => {\n  Toast.push(\n    <Notification title={keyword} type={type} duration={2500}>\n      {message}\n    </Notification>,\n    {\n      placement: \"top-end\",\n    }\n  );\n};\n\nconst NewQuotation = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [size, setSize] = useState(1400);\n\n  const Customers = useSelector((state) => state.quotation_new.data.customers);\n  const Products = useSelector((state) => state.quotation_new.data.products);\n  const isOpen = useSelector((state) => state.quotation.state.openDrawer);\n\n  useEffect(() => {\n    if (isOpen) {\n      getWindowSize();\n      fetchData();\n    }\n  }, [isOpen]); // Run the effect only when isOpen changes\n\n  const fetchData = async () => {\n    dispatch(getAllCustomers());\n    dispatch(getAllProductsWithDrawing());\n  };\n\n  const getWindowSize = () => {\n    const width = window.innerWidth;\n    setSize(width - 250);\n  };\n\n  const handleFormSubmit = async (values, setSubmitting) => {\n    console.log(values);\n    setSubmitting(true);\n    const action = await dispatch(postNewEnquiry(values));\n    if (action.payload.status < 300) {\n      setSubmitting(false);\n      popNotification(\"Successfull\", \"success\", \"Enquiry Successfully created\");\n      onDrawerClose();\n      dispatch(getAllEnquiry());\n    } else {\n      popNotification(\"Unsuccessful\", \"error\", \"Enquiry not created\");\n      setSubmitting(false);\n    }\n  };\n\n  const onDrawerClose = () => {\n    dispatch(toggleDrawer(false));\n  };\n\n  const handleDiscard = () => {\n    navigate(\"/product\");\n  };\n\n  const Footer = (\n    <div className=\"text-right w-full\">\n      <Button size=\"sm\" className=\"mr-2\" onClick={() => onDrawerClose()}>\n        Cancel\n      </Button>\n      <Button size=\"sm\" variant=\"solid\">\n        Save\n      </Button>\n    </div>\n  );\n  return (\n    <>\n      <Drawer\n        title=\"New Quotation\"\n        isOpen={isOpen}\n        onClose={onDrawerClose}\n        onRequestClose={onDrawerClose}\n        // footer={Footer}\n        width={size}\n      >\n        <QuotationForm\n          type=\"new\"\n          onFormSubmit={handleFormSubmit}\n          onDiscard={handleDiscard}\n          Customers={Customers}\n          Products={Products}\n        />\n      </Drawer>\n    </>\n  );\n};\n\nexport default NewQuotation;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { togglDeleteConfirmationDialog } from \"../store/stateSlice\";\nimport { Notification, Toast } from \"../../../../../../components/ui\";\nimport { deleteEnquiry, getAllEnquiry } from \"../store/dataSlice\";\nimport { ConfirmDialog } from \"../../../../../../components/shared\";\n\nconst pushNotification = (title, type, message) => {\n  return Toast.push(\n    <Notification title={title} type={type} duration={2500}>\n      {message}\n    </Notification>,\n    {\n      placement: \"top-center\",\n    }\n  );\n};\n\nconst DeleteQuotationConfirmationDialog = () => {\n  const [loading, setLoading] = useState(false);\n\n  const tableData = useSelector((state) => state.quotation.data.tableData);\n\n  const dispatch = useDispatch();\n  const selectedEnquiry = useSelector(\n    (state) => state.quotation.state.selectedEnquiry\n  );\n  const deleteDialog = useSelector(\n    (state) => state.quotation.state.deleteConfirmation\n  );\n\n  const onDialogClose = () => {\n    dispatch(togglDeleteConfirmationDialog(false));\n  };\n\n  const onDelete = async () => {\n    setLoading(true);\n    const action = await dispatch(\n      deleteEnquiry({\n        enquiry_id: selectedEnquiry?.enquiry_id,\n      })\n    );\n    setLoading(false);\n    if (action.payload?.status < 300) {\n      pushNotification(\n        \"Successfully Deleted\",\n        \"success\",\n        action.payload?.data?.message\n      );\n      onDialogClose();\n      dispatch(getAllEnquiry(tableData));\n    } else {\n      return pushNotification(\n        \"Unsuccessfully\",\n        \"danger\",\n        action.payload?.data?.message\n      );\n    }\n  };\n\n  return (\n    <ConfirmDialog\n      isOpen={deleteDialog}\n      onClose={onDialogClose}\n      onRequestClose={onDialogClose}\n      type=\"danger\"\n      title=\"Delete Enquiry\"\n      onCancel={onDialogClose}\n      onConfirm={onDelete}\n      confirmText={!loading ? \"Confirm\" : \"Deleting...\"}\n      confirmButtonColor=\"red-600\"\n    >\n      <p>\n        Are you sure you want to delete this Enquiry? This action cannot be\n        undone.\n      </p>\n    </ConfirmDialog>\n  );\n};\n\nexport default DeleteQuotationConfirmationDialog;\n","import React, { useEffect, useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getAllEnquiry, setTableData } from '../store/dataSlice'\nimport useThemeClass from '../../../../../../utils/hooks/useThemeClass'\nimport { Link, useNavigate } from 'react-router-dom'\nimport cloneDeep from 'lodash/cloneDeep'\nimport DataTable from '../../../../../../components/shared/DataTable'\nimport { HiOutlinePencil, HiOutlineTrash } from 'react-icons/hi'\nimport { Tag } from '../../../../../../components/ui'\n// import NewEnquiry from \"../../NewEnquiry\";\nimport NewQuotation from '../../NewQuotation'\nimport {\n  setSelectedEnquiry,\n  togglDeleteConfirmationDialog\n} from '../store/stateSlice'\nimport DeleteQuotationConfirmationDialog from './QuotationDeleteConfirmation'\n\nconst exportType = {\n  FOREIGN: {\n    label: 'Foreign',\n    bgClass: 'bg-emerald-100',\n    textClass: 'text-emerald-600'\n  },\n  DOMESTIC: {\n    label: 'Domestic',\n    bgClass: 'bg-pink-100',\n    textClass: 'text-pink-600'\n  }\n}\n\nconst ActionColumn = ({ row }) => {\n  const { textTheme } = useThemeClass()\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n\n  const onEdit = () => {\n    navigate(`/product/edit/${row.id}`)\n  }\n\n  const onDelete = () => {\n    dispatch(setSelectedEnquiry(row))\n    dispatch(togglDeleteConfirmationDialog(true))\n  }\n\n  return (\n    <div className=\"flex justify-center gap-4 text-lg\">\n      <span\n        className={`cursor-pointer hover:${textTheme}`}\n        onClick={onEdit}\n      >\n        <HiOutlinePencil />\n      </span>\n      <span\n        className={`cursor-pointer hover:text-red-500`}\n        onClick={onDelete}\n      >\n        <HiOutlineTrash />\n      </span>\n    </div>\n  )\n}\n\nconst NameColumn = ({ row }) => {\n  const { textTheme } = useThemeClass()\n\n  return (\n    <div className=\"items-center\">\n      <Link\n        className={`hover:${textTheme} font-semibold`}\n        // to={`/enquiry/details/${}`}\n      >\n        {row?.enq_number}\n      </Link>\n    </div>\n  )\n}\n\nconst QuotationTable = () => {\n  const dispatch = useDispatch()\n  const data = useSelector((state) => state.quotation.data.enquiryList)\n  const loading = useSelector((state) => state.quotation.data.loading)\n\n  const columns = [\n    {\n      header: 'enq. number',\n      accessorKey: 'enq_number',\n      cell: (props) => {\n        const row = props.row.original\n        return <NameColumn row={row} />\n      }\n    },\n    {\n      header: 'customer',\n      accessorKey: '',\n      cell: (props) => {\n        const row = props.row.original\n        return <div>{row?.Customer?.name}</div>\n      }\n    },\n    {\n      header: 'type',\n      accessorKey: 'enquiry_type',\n      cell: (props) => {\n        const row = props.row.original\n        return (\n          <div className=\"mr-2\">\n            <Tag\n              className={`${exportType[row?.enquiry_type]?.bgClass} ${\n                exportType[row?.enquiry_type]?.textClass\n              } border-0`}\n            >\n              {exportType[row?.enquiry_type]?.label}\n            </Tag>\n          </div>\n        )\n      }\n    },\n    {\n      header: 'Person of contact name',\n      accessorKey: 'poc_name'\n    },\n    {\n      header: 'enquiry date',\n      accessorKey: 'enquiry_date',\n      cell: (props) => {\n        const row = props.row.original\n        return <div className=\"font-semibold\">{row?.enquiry_date}</div>\n      }\n    },\n\n    {\n      header: 'action',\n      accessorKey: 'action',\n      id: 't',\n      cell: (props) => {\n        const row = props.row.original\n        return <ActionColumn row={row} />\n      }\n    }\n  ]\n\n  const { pageIndex, pageSize, query, total } = useSelector(\n    (state) => state.quotation.data.tableData\n  )\n\n  const fetchData = useCallback(() => {\n    dispatch(getAllEnquiry({ pageIndex, pageSize, query }))\n  }, [pageIndex, pageSize, query, dispatch])\n\n  useEffect(() => {\n    fetchData()\n  }, [fetchData, pageIndex, pageSize])\n\n  const tableData = useMemo(\n    () => ({ pageIndex, pageSize, query, total }),\n    [pageIndex, pageSize, query, total]\n  )\n\n  const onPaginationChange = (page) => {\n    const newTableData = cloneDeep(tableData)\n    newTableData.pageIndex = page\n    dispatch(setTableData(newTableData))\n  }\n\n  const onSelectChange = (value) => {\n    const newTableData = cloneDeep(tableData)\n    newTableData.pageSize = Number(value)\n    newTableData.pageIndex = 1\n    dispatch(setTableData(newTableData))\n  }\n\n  return (\n    <>\n      <DataTable\n        columns={columns}\n        data={data}\n        loading={loading}\n        pagingData={{ pageIndex, pageSize, query, total }}\n        onPaginationChange={onPaginationChange}\n        onSelectChange={onSelectChange}\n      />\n      <NewQuotation />\n\n      <DeleteQuotationConfirmationDialog />\n    </>\n  )\n}\n\nexport default QuotationTable\n","import React, { useRef } from \"react\";\nimport { Button } from \"../../../../../../components/ui\";\nimport { setTableData, getAllEnquiry } from \"../store/dataSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport { toggleDrawer } from \"../store/stateSlice\";\n// import EnquiryTableSearch from \"./EnquiryTableSearch\";\n\nconst EnquiryTableTools = () => {\n  const dispatch = useDispatch();\n\n  const inputRef = useRef();\n\n  const tableData = useSelector((state) => state.quotation.data.tableData);\n\n  const handleInputChange = (val) => {\n    const newTableData = cloneDeep(tableData);\n    newTableData.query = val;\n    newTableData.pageIndex = 1;\n    if (typeof val === \"string\" && val.length > 1) {\n      fetchData(newTableData);\n    }\n\n    if (typeof val === \"string\" && val.length === 0) {\n      fetchData(newTableData);\n    }\n  };\n\n  const fetchData = (data) => {\n    dispatch(setTableData(data));\n    dispatch(getAllEnquiry(data));\n  };\n\n  const onClearAll = () => {\n    const newTableData = cloneDeep(tableData);\n    newTableData.query = \"\";\n    inputRef.current.value = \"\";\n    fetchData(newTableData);\n  };\n\n  const onDrawer = () => {\n    dispatch(toggleDrawer(true));\n  };\n\n  return (\n    <div className=\"md:flex items-center justify-end gap-2 mb-4\">\n      {/* <EnquiryTableSearch ref={inputRef} onInputChange={handleInputChange} /> */}\n      {/* <Button size=\"sm\" onClick={onClearAll}>\n        Clear All\n      </Button> */}\n      <Button size=\"sm\" variant=\"solid\" color=\"purple-600\" onClick={onDrawer}>\n        Create Quotation\n      </Button>\n    </div>\n  );\n};\n\nexport default EnquiryTableTools;\n","import React from \"react\";\nimport { injectReducer } from \"../../../../../store\";\nimport quotationReducer from \"./store\";\nimport QuotationTable from \"./components/QuotationTable\";\nimport { Card } from \"../../../../../components/ui\";\nimport QuotationTableTools from \"./components/QuotationTableTools\";\n\ninjectReducer(\"quotation\", quotationReducer);\n\nconst Enquiry = () => {\n  return (\n    <>\n      <Card className=\"bg-purple-50\">\n        <div className=\"flex items-center justify-between\" mb-3>\n          <h3>Quotation List</h3>\n          <QuotationTableTools />\n        </div>\n        <QuotationTable />\n      </Card>\n    </>\n  );\n};\n\nexport default Enquiry;\n","'use strict';\n\n/* eslint-env browser */\nmodule.exports = typeof self === 'object' ? self.FormData : window.FormData;\n","import ApiService from '../../ApiService'\n\nexport async function apiIsProductExist(data) {\n  return ApiService.fetchData({\n    url: 'v1/web/company/product/code/check',\n    method: 'post',\n    data\n  })\n}\n\nexport async function apiGetProductDetailsWithoutDrawing(data) {\n  return ApiService.fetchData({\n    url: 'v1/web/company/product/details/id',\n    method: 'post',\n    data\n  })\n}\nexport async function apiGetProductForNewDrawing(data) {\n  return ApiService.fetchData({\n    url: 'v1/web/company/product/drawing/id',\n    method: 'post',\n    data\n  })\n}\n\nexport async function apiGetAllProductsWithPagination(data) {\n  return ApiService.fetchData({\n    url: 'v1/web/company/product',\n    method: 'post',\n    data\n  })\n}\n\nexport async function apiPostNewProduct(data) {\n  return ApiService.fetchData({\n    url: 'v1/web/company/product/register',\n    method: 'post',\n    data\n  })\n}\n\nexport async function apiUpdateProduct(data) {\n  return ApiService.fetchData({\n    url: 'v1/web/company/product/update/id',\n    method: 'put',\n    data\n  })\n}\n\nexport async function apiDeleteProduct(data) {\n  return ApiService.fetchData({\n    url: 'v1/web/company/product/delete/id',\n    method: 'delete',\n    data\n  })\n}\n\nexport async function apiGetProductDetailsByProductId(data) {\n  return ApiService.fetchData({\n    url: 'v1/web/company/product/details/id',\n    method: 'post',\n    data\n  })\n}\n\nexport async function apiDeleteProductByProductId(data) {\n  return ApiService.fetchData({\n    url: 'v1/web/company/product/delete',\n    method: 'delete',\n    data\n  })\n}\n\nexport async function apiUpdateProductDetailsByProductId(data) {\n  return ApiService.fetchData({\n    url: 'v1/web/company/product/update',\n    method: 'put',\n    data\n  })\n}\nexport async function apiGetAllProductsWithDrawing(data) {\n  return ApiService.fetchData({\n    url: 'v1/web/company/product/drawing/select',\n    method: 'get'\n  })\n}\n\nexport async function apiGetAllProductsCategoryId(data) {\n  return ApiService.fetchData({\n    url: 'v1/web/company/product/category/id',\n    method: 'post',\n    data\n  })\n}\n\nexport async function apiGetAllProductsItemCodeOption() {\n  return ApiService.fetchData({\n    url: 'v1/web/company/product/itemCode/option',\n    method: 'get'\n  })\n}\n\nexport async function apiGetAllProductsOption(data) {\n  return ApiService.fetchData({\n    url: 'v1/web/company/product/option',\n    method: 'post',\n    data\n  })\n}\n"],"names":["async","apiPostNewEnquiry","data","ApiService","fetchData","url","method","apiGetEnquiryById","apiGetAllEnquiry","apiDeleteEnquiry","apiUpdateEnquiry","Tr","Td","TBody","Table","TableRowSkeleton","props","columns","rows","avatarInColumns","avatarProps","_jsx","children","Array","from","_","i","map","row","col","_jsxs","className","includes","Skeleton","variant","defaultProps","Th","THead","IndeterminateCheckbox","indeterminate","onChange","onCheckBoxChange","onIndeterminateCheckBoxChange","rest","ref","useRef","useEffect","current","checked","Checkbox","e","handleChange","DataTable","forwardRef","skeletonAvatarColumns","columnsProp","loading","onPaginationChange","onSelectChange","onSort","pageSizes","selectable","skeletonAvatarProps","pagingData","tableWidth","pageSize","pageIndex","total","sorting","setSorting","useState","pageSizeOption","useMemo","number","value","label","isArray","sortOrder","length","desc","id","order","key","hasOldColumnMetaKey","some","Header","accessor","Cell","finalColumns","size","undefined","minSize","maxSize","header","_ref","table","getIsAllRowsSelected","getIsSomeRowsSelected","getToggleAllRowsSelectedHandler","handleIndeterminateCheckBoxChange","target","getRowModel","cell","_ref2","getIsSelected","disabled","getCanSelect","getIsSomeSelected","getToggleSelectedHandler","handleCheckBoxChange","original","useReactTable","getCoreRowModel","getFilteredRowModel","getPaginationRowModel","getSortedRowModel","manualPagination","manualSorting","onSortingChange","state","columnResizeMode","resetSorting","resetSelected","toggleAllRowsSelected","useImperativeHandle","message","Alert","Loading","type","style","width","overflowX","tableLayout","getHeaderGroups","headerGroup","headers","colSpan","column","getSize","isPlaceholder","classNames","flexRender","columnDef","getContext","slice","getVisibleCells","Pagination","currentPage","page","minWidth","Select","menuPlacement","isSearchable","filter","option","options","handleSelectChange","Number","apiGetCustomerStatisticData","apiUpdateCustomerDetails","apiGetAllCustomers","apiPostRegisterNewCustomer","apiUpdateCustomer","apiGetCustomersWithPagination","apiGetCustomerDetailsByCustomerId","apiGetAllCustomersOption","apiDeleteCustomer","getAllEnquiry","createAsyncThunk","error","response","deleteEnquiry","dataSlice","createSlice","name","initialState","enquiryList","tableData","query","reducers","setTableData","action","payload","extraReducers","fulfilled","_action$payload$data","pending","setFilterData","actions","stateSlice","deleteConfirmation","selectedEnquiry","openDrawer","togglDeleteConfirmationDialog","toggleDrawer","setSelectedEnquiry","combineReducers","getAllCustomers","getAllProductsWithDrawing","apiGetAllProductsWithDrawing","postNewEnquiry","customers","products","_action$payload$data2","Control","components","values","errors","touched","Products","productData","product","CustomConTrol","_selected$value","selected","getValue","item_code","CustomSelectOption","_ref3","_data$value","innerProps","isSelected","HiCheck","textAlign","border","compact","top","widTh","rowSpan","BsBorderRight","FieldArray","_ref4","form","remove","push","_Fragment","items","index","fieldFeedback","getIn","Boolean","parseFloat","toFixed","FormItem","Field","_ref5","field","Option","ConTrol","find","_product$value","_values$items$index","_values$items$index$P","product_id","Product","setFieldValue","menuPortalTarget","document","body","styles","menuPortal","base","zIndex","autoComplete","component","Input","Button","shape","onClick","icon","HiOutlineTrash","color","casting_drawing_no","machining_drawing_no","material","quantity","raw_weight","raw_per_kg_rate","raw_material_cost","machining","blasting_primer_paint","packing_cost","total_per_unit_cost1","profit","total_per_unit_cost2","pattern_tooling_cost","lead_time","InputInformationFields","placeholder","invalid","errorMessage","memo","SelectInformationFields","item","validationSchema","Yup","customer_id","required","enquiry_date","enquiry_type","enq_number","poc_name","poc_contact","of","drawing_revision","test","drawing","ctx","_ctx$parent","_ctx$parent$Product","parent","Drawings","drawingRevision","revision_number","createError","delivery_date","matches","QuotationForm","useDispatch","useNavigate","initialData","onFormSubmit","onDiscard","Customers","CustomerOption","m","Formik","enableReinitialize","innerRef","initialValues","onSubmit","setSubmitting","formData","cloneDeep","isSubmitting","setErrors","handleSubmit","resetForm","Form","FormContainer","Card","SelectInformatinFields","quotation_number","quotation_date","DatePicker","date","ItemForm","StickyFooter","stickyClass","AiOutlineSave","Date","project","injectReducer","newQuotationReducer","popNotification","keyword","Toast","Notification","title","duration","placement","NewQuotation","dispatch","navigate","setSize","useSelector","quotation_new","isOpen","quotation","getWindowSize","window","innerWidth","onDrawerClose","Drawer","onClose","onRequestClose","console","log","status","handleDiscard","pushNotification","DeleteQuotationConfirmationDialog","setLoading","deleteDialog","onDialogClose","ConfirmDialog","onCancel","onConfirm","_action$payload","enquiry_id","_action$payload3","_action$payload3$data","_action$payload2","_action$payload2$data","confirmText","confirmButtonColor","exportType","FOREIGN","bgClass","textClass","DOMESTIC","ActionColumn","textTheme","useThemeClass","onEdit","HiOutlinePencil","onDelete","NameColumn","Link","QuotationTable","accessorKey","_row$Customer","Customer","_exportType$row$enqui","_exportType$row$enqui2","_exportType$row$enqui3","Tag","useCallback","newTableData","EnquiryTableTools","onDrawer","quotationReducer","Enquiry","QuotationTableTools","module","exports","self","FormData","apiIsProductExist","apiGetAllProductsWithPagination","apiPostNewProduct","apiUpdateProduct","apiDeleteProduct","apiGetProductDetailsByProductId","apiGetAllProductsCategoryId","apiGetAllProductsItemCodeOption","apiGetAllProductsOption"],"sourceRoot":""}